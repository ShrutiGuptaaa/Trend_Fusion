Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import streamlit as st\r\nimport pandas as pd\r\n\r\ndata = [\r\n    [1, \"Wide Leg Jeans\", \"Bottom Wear\", \"Jeans\", \"Spring\", 2022, \"Denim\", \"Blue\", \"Solid\", \"Casual\", \"Relaxed Fit\", 80, 10000, 500, 10, \"Images/wide leg jeans.jpeg\", \"Comfortable and stylish jeans for spring\", \"jeans, wide leg, denim\", 5000, 4.5,\"Female\"],\r\n    [2, \"Chikankari Kurtas\", \"Top Wear\", \"Kurtas\", \"Summer\", 2022, \"Cotton\", \"White\", \"Floral\", \"Ethnic\", \"A-Line\", 92, 8000, 300, 8, \"Images/chikankari.jpeg\", \"Beautiful hand-embroidered kurtas for summer\", \"kurtas, chikankari, cotton\", 3000, 4.7,\"Female\"],\r\n    [3, \"Cord Sets\", \"Dress\", \"Sets\", \"Fall\", 2022, \"Corduroy\", \"Brown\", \"Stripes\", \"Casual\", \"Slim Fit\", 60, 6000, 200, 6, \"Images/coord_Set.jpeg\", \"Cozy cord sets for fall\", \"cord, sets, fall fashion\", 2000, 4.2,\"Female\"],\r\n    # [4, \"Pastel Colors\", \"Color\", \"Pastel\", \"Spring\", 2023, \"-\", \"Pastel Pink\", \"-\", \"-\", \"-\", 90, 12000, 600, 12, \"Images/pastel_colors.jpg\", \"Soft and soothing pastel colors for spring\", \"pastel, colors, spring\", 7000, 4.8,\"Female\"],\r\n    [5, \"Bell Bottoms\", \"Bottom Wear\", \"Jeans\", \"Summer\", 2023, \"Denim\", \"Black\", \"Solid\", \"Retro\", \"Flared\", 85, 11000, 550, 11, \"Images/bell bottoms.jpeg\", \"Groovy bell bottoms for summer\", \"bell bottoms, jeans, retro\", 4500, 4.6,\"Female\"],\r\n    [6, \"Silk Blouses\", \"Top Wear\", \"Blouses\", \"Fall\", 2022, \"Silk\", \"Red\", \"Polka Dots\", \"Formal\", \"Fitted\", 75, 9000, 400, 9, \"Images/silk blouse.jpeg\", \"Luxurious silk blouses for fall\", \"silk, blouses, formal\", 3500, 4.4,\"Female\"],\r\n    [7, \"Athleisure Wear\", \"Casual\", \"Athleisure\", \"Winter\", 2023, \"Polyester\", \"Grey\", \"Stripes\", \"Sporty\", \"Relaxed Fit\", 95, 15000, 800, 15, \"Images/athliesure.jpeg\", \"Comfortable athleisure wear for winter\", \"athleisure, sporty, winter\", 10000, 4.9,\"Female\"],\r\n    [8, \"Ruffled Dresses\", \"Dress\", \"Dresses\", \"Spring\", 2022, \"Cotton\", \"Yellow\", \"Floral\", \"Feminine\", \"A-Line\", 80, 10000, 500, 10, \"Images/ruffke dresses.jpeg\", \"Whimsical ruffled dresses for spring\", \"ruffles, dresses, spring\", 5000, 4.6,\"Female\"],\r\n    [9, \"Leather Jackets\", \"Outerwear\", \"Jackets\", \"Fall\", 2022, \"Leather\", \"Black\", \"Solid\", \"Edgy\", \"Fitted\", 85, 11000, 550, 11, \"Images/leather.jpeg\", \"Tough and stylish leather jackets for fall\", \"leather, jackets, edgy\", 4000, 4.7,\"Female\"],\r\n    [10, \"Jumpsuits\", \"Dress\", \"Jumpsuits\", \"Summer\", 2023, \"Cotton\", \"White\", \"Solid\", \"Chic\", \"Bodycon\", 90, 12000, 600, 12, \"Images/jump suit.jpeg\", \"Stylish and comfortable jumpsuits for summer\", \"jumpsuits, summer, chic\", 7000, 4.8,\"Female\"],\r\n    [11, \"High-Waisted Pants\", \"Bottom Wear\", \"Pants\", \"Spring\", 2022, \"Denim\", \"Blue\", \"Solid\", \"Casual\", \"High-Waisted\", 75, 9000, 400, 9, \"Images/high waisted.jpeg\", \"Trendy high-waisted pants for spring\", \"high-waisted, pants, denim\", 3000, 4.3,\"Female\"],\r\n    [12, \"Crochet Tops\", \"Top Wear\", \"Tops\", \"Summer\", 2022, \"Cotton\", \"White\", \"Floral\", \"Bohemian\", \"Relaxed Fit\", 94, 8000, 300, 8, \"Images/crochet tops.jpeg\", \"Handmade crochet tops for summer\", \"crochet, tops, bohemian\", 2500, 4.5,\"Female\"],\r\n    [13, \"Tie-Dye Shirts\", \"Top Wear\", \"Shirts\", \"Summer\", 2022, \"Cotton\", \"Multicolor\", \"Tie-Dye\", \"Casual\", \"Relaxed Fit\", 85, 11000, 550, 11, \"Images/tie dye.jpeg\", \"Colorful tie-dye shirts for summer\", \"tie-dye, shirts, casual\", 4500, 4.7,\"Female\"],\r\n    [14, \"Plaid Flannel Shirts\", \"Casual\", \"Shirts\", \"Fall\", 2022, \"Cotton\", \"Red\", \"Plaid\", \"Casual\", \"Relaxed Fit\", 80, 10000, 500, 10, \"Images/plaid fannel.jpeg\", \"Cozy plaid flannel shirts for fall\", \"plaid, shirts, casual\", 4000, 4.6,\"Female\"],\r\n    [15, \"Cargo Pants\", \"Bottom Wear\", \"Pants\", \"Spring\", 2023, \"Cotton\", \"Green\", \"Solid\", \"Casual\", \"Loose Fit\", 75, 9000, 400, 9, \"Images/cargo pants.jpeg\", \"Functional cargo pants for spring\", \"cargo, pants, casual\", 3000, 4.4,\"Female\"],\r\n    [16, \"Maxi Dresses\", \"Dress\", \"Dresses\", \"Summer\", 2023, \"Cotton\", \"Blue\", \"Floral\", \"Feminine\", \"Flowy\", 95, 12000, 600, 12, \"Images/maxi dress.jpeg\", \"Elegant maxi dresses for summer\", \"maxi, dresses, feminine\", 6000, 4.8,\"Female\"],\r\n    [17, \"Bomber Jackets\", \"Outerwear\", \"Jackets\", \"Fall\", 2022, \"Polyester\", \"Green\", \"Solid\", \"Casual\", \"Fitted\", 85, 11000, 550, 11, \"Images/bomber jacket.jpeg\", \"Trendy bomber jackets for fall\", \"bomber, jackets, casual\", 4500, 4.7,\"Female\"],\r\n    [18, \"Puffer Jackets\", \"Outerwear\", \"Jackets\", \"Winter\", 2023, \"Nylon\", \"Black\", \"Solid\", \"Casual\", \"Oversized\", 90, 13000, 650, 13, \"Images/puffer jacket.jpeg\", \"Warm puffer jackets for winter\", \"puffer, jackets, casual\", 7500, 4.9,\"Female\"],\r\n    [19, \"Oversized Hoodies\", \"Top Wear\", \"Hoodies\", \"Fall\", 2022, \"Cotton\", \"Grey\", \"Solid\", \"Casual\", \"Oversized\", 80, 10000, 500, 10, \"Images/oversized hoodies .jpeg\", \"Comfortable oversized hoodies for fall\", \"hoodies, casual, oversized\", 5000, 4.6,\"Female\"],\r\n    [20, \"Skinny Jeans\", \"Bottom Wear\", \"Jeans\", \"Winter\", 2023, \"Denim\", \"Black\", \"Solid\", \"Casual\", \"Fitted\", 85, 11000, 550, 11, \"Images/skinny jeans.jpeg\", \"Trendy skinny jeans for winter\", \"skinny, jeans, casual\", 4000, 4.5,\"Female\"],\r\n    [21, \"Midi Skirts\", \"Bottom Wear\", \"Skirts\", \"Spring\", 2023, \"Cotton\", \"Pink\", \"Solid\", \"Feminine\", \"A-Line\", 90, 12000, 600, 12, \"Images/midi skirts.jpeg\", \"Chic midi skirts for spring\", \"midi, skirts, feminine\", 5500, 4.8,\"Female\"],\r\n    [22, \"Ankle Boots\", \"Footwear\", \"Boots\", \"Fall\", 2022, \"Leather\", \"Black\", \"Solid\", \"Casual\", \"Ankle\", 85, 11000, 550, 11, \"Images/ankle boots.jpeg\", \"Stylish ankle boots for fall\", \"ankle boots, casual, fall\", 4500, 4.7,\"Female\"],\r\n    [23, \"Wide Brim Hats\", \"Accessories\", \"Hats\", \"Summer\", 2023, \"Straw\", \"Beige\", \"Solid\", \"Casual\", \"Wide Brim\", 75, 9000, 400, 9, \"Images/wide brim.jpeg\", \"Trendy wide brim hats for summer\", \"hats, wide brim, casual\", 3500, 4.4,\"Female\"],\r\n    [24, \"Denim Shorts\", \"Bottom Wear\", \"Shorts\", \"Summer\", 2023, \"Denim\", \"Blue\", \"Solid\", \"Casual\", \"Fitted\", 80, 10000, 500, 10, \"Images/denim shorts.jpeg\", \"Comfortable denim shorts for summer\", \"shorts, denim, casual\", 4000, 4.6,\"Female\"],\r\n    [25, \"Blazer Dresses\", \"Dress\", \"Dresses\", \"Winter\", 2023, \"Polyester\", \"Black\", \"Solid\", \"Formal\", \"Fitted\", 90, 13000, 650, 12, \"Images/blazer dress.jpeg\", \"Chic blazer dresses for winter\", \"blazer, dresses, formal\", 7000, 4.9,\"Female\"],\r\n    [26, \"Kimono Cardigans\", \"Outerwear\", \"Cardigans\", \"Spring\", 2023, \"Cotton\", \"White\", \"Floral\", \"Bohemian\", \"Loose Fit\", 75, 9000, 400, 9, \"Images/kimono.jpeg\", \"Stylish kimono cardigans for spring\", \"kimono, cardigans, bohemian\", 3500, 4.5,\"Female\"],\r\n    [27, \"Espadrilles\", \"Footwear\", \"Shoes\", \"Summer\", 2023, \"Canvas\", \"Beige\", \"Solid\", \"Casual\", \"Flat\", 80, 10000, 500, 10, \"Images/espadriel.jpeg\", \"Comfortable espadrilles for summer\", \"espadrilles, shoes, casual\", 4000, 4.6,\"Female\"],\r\n    [28, \"Button-Up Shirts\", \"Casual\", \"Shirts\", \"Fall\", 2022, \"Cotton\", \"Blue\", \"Solid\", \"Casual\", \"Fitted\", 85, 11000, 550, 11, \"Images/buttonup shirts.jpeg\", \"Classic button-up shirts for fall\", \"button-up, shirts, casual\", 4500, 4.7,\"Female\"],\r\n    [29, \"Faux Leather Leggings\", \"Bottom Wear\", \"Leggings\", \"Winter\", 2023, \"Faux Leather\", \"Black\", \"Solid\", \"Casual\", \"Fitted\", 90, 13000, 650, 13, \"Images/faux leggings.jpeg\", \"Trendy faux leather leggings for winter\", \"faux leather, leggings, casual\", 6000, 4.8,\"Female\"],\r\n    [30, \"Graphic Tees\", \"Top Wear\", \"T-Shirts\", \"Spring\", 2023, \"Cotton\", \"White\", \"Graphic\", \"Casual\", \"Relaxed Fit\", 80, 10000, 500, 10, \"Images/graphic tees.jpeg\", \"Trendy graphic tees for spring\", \"graphic, tees, casual\", 4000, 4.6,\"Female\"],\r\n    [31, \"Sweater Dresses\", \"Dress\", \"Dresses\", \"Winter\", 2023, \"Wool\", \"Grey\", \"Solid\", \"Casual\", \"Fitted\", 90, 13000, 650, 13, \"Images/sweater dress.jpeg\", \"Warm sweater dresses for winter\", \"sweater, dresses, casual\", 7000, 4.9,\"Female\"],\r\n    [32, \"Chino Pants\", \"Bottom Wear\", \"Pants\", \"Spring\", 2023, \"Cotton\", \"Beige\", \"Solid\", \"Casual\", \"Slim Fit\", 75, 9000, 400, 9, \"Images/chino pants.jpeg\", \"Classic chino pants for spring\", \"chino, pants, casual\", 3500, 4.5,\"Female\"],\r\n    [33, \"Lace Dresses\", \"Dress\", \"Dresses\", \"Summer\", 2023, \"Lace\", \"White\", \"Solid\", \"Feminine\", \"A-Line\", 92, 11000, 550, 11, \"Images/lace dresses.jpeg\", \"Elegant lace dresses for summer\", \"lace, dresses, feminine\", 5000, 4.7,\"Female\"],\r\n    [34, \"Sherpa Jackets\", \"Outerwear\", \"Jackets\", \"Winter\", 2023, \"Sherpa\", \"White\", \"Solid\", \"Casual\", \"Oversized\", 90, 13000, 650, 14, \"Images/sherpa jacket.jpeg\", \"Cozy sherpa jackets for winter\", \"sherpa, jackets, casual\", 7000, 4.9,\"Female\"],\r\n    [35, \"Peasant Tops\", \"Top Wear\", \"Tops\", \"Spring\", 2023, \"Cotton\", \"Yellow\", \"Floral\", \"Bohemian\", \"Relaxed Fit\", 75, 9000, 400, 9, \"Images/peasant tops.jpeg\", \"Boho peasant tops for spring\", \"peasant, tops, bohemian\", 3500, 4.4,\"Female\"],\r\n    [36, \"Wide Leg Trousers\", \"Casual\", \"Trousers\", \"Fall\", 2022, \"Polyester\", \"Grey\", \"Solid\", \"Formal\", \"Wide Leg\", 80, 10000, 500, 10, \"Images/wide leg trousers.jpeg\", \"Stylish wide leg trousers for fall\", \"wide leg, trousers, formal\", 4000, 4.6,\"Female\"],\r\n    [37, \"Kimono Dresses\", \"Dress\", \"Dresses\", \"Summer\", 2023, \"Silk\", \"Red\", \"Floral\", \"Feminine\", \"Wrap\", 85, 11000, 550, 11, \"Images/kimono dress.jpeg\", \"Elegant kimono dresses for summer\", \"kimono, dresses, feminine\", 5000, 4.7,\"Female\"],\r\n    [38, \"Pencil Skirts\", \"Bottom Wear\", \"Skirts\", \"Winter\", 2023, \"Polyester\", \"Black\", \"Solid\", \"Formal\", \"Fitted\", 90, 13000, 650, 12, \"Images/pencil skirts.jpeg\", \"Chic pencil skirts for winter\", \"pencil, skirts, formal\", 6000, 4.8,\"Female\"],\r\n    [39, \"Flannel Pajamas\", \"Sleepwear\", \"Pajamas\", \"Winter\", 2023, \"Flannel\", \"Red\", \"Plaid\", \"Casual\", \"Relaxed Fit\", 85, 11000, 550, 11, \"Images/flannel pajamasjpeg.jpeg\", \"Cozy flannel pajamas for winter\", \"pajamas, flannel, casual\", 4500, 4.7,\"Female\"],\r\n    [40, \"Chiffon Blouses\", \"Top Wear\", \"Blouses\", \"Spring\", 2023, \"Chiffon\", \"Pink\", \"Solid\", \"Feminine\", \"Loose Fit\", 80, 10000, 500, 10, \"Images/chiffon blouses.jpeg\", \"Elegant chiffon blouses for spring\", \"chiffon, blouses, feminine\", 4000, 4.6,\"Female\"],\r\n    [41, \"Turtleneck Sweaters\", \"Top Wear\", \"Sweaters\", \"Fall\", 2022, \"Wool\", \"Brown\", \"Solid\", \"Casual\", \"Fitted\", 90, 13000, 650, 14, \"Images/turtle necks.jpeg\", \"Warm turtleneck sweaters for fall\", \"turtleneck, sweaters, casual\", 7000, 4.9,\"Female\"],\r\n    [42, \"Denim Jackets\", \"Outerwear\", \"Jackets\", \"Spring\", 2023, \"Denim\", \"Blue\", \"Solid\", \"Casual\", \"Fitted\", 85, 11000, 550, 12, \"Images/denim jackets.jpeg\", \"Classic denim jackets for spring\", \"denim, jackets, casual\", 5000, 4.7,\"Female\"],\r\n    [43, \"Wrap Dresses\", \"Dress\", \"Dresses\", \"Summer\", 2023, \"Cotton\", \"Blue\", \"Solid\", \"Feminine\", \"Wrap\", 80, 10000, 500, 10, \"Images/wrap dresses.jpeg\", \"Chic wrap dresses for summer\", \"wrap, dresses, feminine\", 4500, 4.6,\"Female\"],\r\n    [44, \"Platform Sneakers\", \"Footwear\", \"Sneakers\", \"Fall\", 2022, \"Canvas\", \"White\", \"Solid\", \"Casual\", \"Platform\", 75, 9000, 400, 9, \"Images/platform sneakers.jpeg\", \"Trendy platform sneakers for fall\", \"platform, sneakers, casual\", 3500, 4.4,\"Female\"],\r\n    [45, \"Pleated Skirts\", \"Bottom Wear\", \"Skirts\", \"Spring\", 2023, \"Polyester\", \"Pink\", \"Solid\", \"Feminine\", \"Pleated\", 80, 10000, 500, 10, \"Images/pleated skirts.jpeg\", \"Chic pleated skirts for spring\", \"pleated, skirts, feminine\", 4000, 4.6,\"Female\"],\r\n    [46, \"Chunky Sweaters\", \"Top Wear\", \"Sweaters\", \"Winter\", 2023, \"Wool\", \"Grey\", \"Solid\", \"Casual\", \"Oversized\", 85, 11000, 550, 11, \"Images/chunky sweaters.jpeg\", \"Cozy chunky sweaters for winter\", \"chunky, sweaters, casual\", 4500, 4.7,\"Female\"],\r\n    [47, \"Harem Pants\", \"Bottom Wear\", \"Pants\", \"Summer\", 2023, \"Cotton\", \"Black\", \"Solid\", \"Casual\", \"Loose Fit\", 70, 8000, 300, 8, \"Images/harem pants.jpeg\", \"Comfortable harem pants for summer\", \"harem, pants, casual\", 3000, 4.5,\"Female\"],\r\n    [48, \"Bardot Tops\", \"Top Wear\", \"Tops\", \"Spring\", 2023, \"Cotton\", \"White\", \"Solid\", \"Feminine\", \"Off-Shoulder\", 88, 9000, 400, 9, \"Images/bardot tops.jpeg\", \"Stylish bardot tops for spring\", \"bardot, tops, feminine\", 3500, 4.6,\"Female\"],\r\n    [49, \"Bomber Jackets\", \"Outerwear\", \"Jackets\", \"Fall\", 2022, \"Polyester\", \"Green\", \"Solid\", \"Casual\", \"Fitted\", 85, 11000, 550, 11, \"Images/bomber jacket1.jpeg\", \"Trendy bomber jackets for fall\", \"bomber, jackets, casual\", 4500, 4.7,\"Female\"],\r\n    [50, \"Puffer Jackets\", \"Outerwear\", \"Jackets\", \"Winter\", 2023, \"Nylon\", \"Black\", \"Solid\", \"Casual\", \"Oversized\", 90, 13000, 650, 13, \"Images/puffer jacket.jpeg\", \"Warm puffer jackets for winter\", \"puffer, jackets, casual\", 7500, 4.9,\"Female\"],\r\n\r\n    [51, \"Slim Fit Chinos\", \"Bottom Wear\", \"Chinos\", \"Summer\", 2022, \"Cotton\", \"Beige\", \"Solid\", \"Casual\", \"Slim Fit\", 85, 12000, 600, 15, \"Images/slim fit chinos.jpeg\", \"Trendy and comfortable chinos for summer\", \"chinos, slim fit, cotton\", 5500, 4.6,\"Male\"],\r\n    [52, \"Graphic Tee\", \"Top Wear\", \"T-shirt\", \"Spring\", 2022, \"Cotton\", \"White\", \"Graphic\", \"Casual\", \"Regular Fit\", 87, 15000, 800, 20, \"Images/graphic tee.jpeg\", \"Cool graphic tee for casual wear\", \"t-shirt, graphic, casual\", 7000, 4.7,\"Male\"],\r\n    [53, \"Bomber Jacket\", \"Outerwear\", \"Jacket\", \"Fall\", 2022, \"Polyester\", \"Black\", \"Solid\", \"Casual\", \"Regular Fit\", 75, 11000, 700, 12, \"Images/bomber jacket men.jpeg\", \"Stylish bomber jacket for fall\", \"jacket, bomber, casual\", 5200, 4.4,\"Male\"],\r\n    [54, \"Linen Shirt\", \"Top Wear\", \"Shirt\", \"Summer\", 2022, \"Linen\", \"Light Blue\", \"Solid\", \"Casual\", \"Regular Fit\", 88, 13000, 750, 18, \"Images/linen shirt.jpeg\", \"Lightweight linen shirt for summer\", \"shirt, linen, casual\", 6300, 4.6,\"Male\"],\r\n    [55, \"Cargo Pants\", \"Bottom Wear\", \"Pants\", \"Spring\", 2022, \"Cotton\", \"Olive Green\", \"Solid\", \"Casual\", \"Loose Fit\", 82, 10500, 650, 14, \"Images/cargo pants men.jpeg\", \"Practical and trendy cargo pants\", \"pants, cargo, casual\", 5400, 4.5,\"Male\"],\r\n    [56, \"Denim Jacket\", \"Outerwear\", \"Jacket\", \"Spring\", 2022, \"Denim\", \"Blue\", \"Solid\", \"Casual\", \"Regular Fit\", 87, 14000, 850, 25, \"Images/denim jacket.jpeg\", \"Classic denim jacket for spring\", \"jacket, denim, casual\", 6800, 4.7,\"Male\"],\r\n    [57, \"Henley Shirt\", \"Top Wear\", \"Shirt\", \"Fall\", 2022, \"Cotton\", \"Gray\", \"Solid\", \"Casual\", \"Regular Fit\", 78, 9000, 550, 10, \"Images/henley shirt.jpeg\", \"Comfortable henley shirt for fall\", \"shirt, henley, casual\", 4700, 4.3,\"Male\"],\r\n    [58, \"Jogger Pants\", \"Sportswear\", \"Pants\", \"Winter\", 2022, \"Polyester\", \"Black\", \"Solid\", \"Casual\", \"Slim Fit\", 83, 11000, 700, 16, \"Images/jogger pants.jpeg\", \"Stylish jogger pants for winter\", \"pants, jogger, casual\", 5900, 4.5,\"Male\"],\r\n    [59, \"Puffer Vest\", \"Outerwear\", \"Vest\", \"Winter\", 2022, \"Nylon\", \"Navy\", \"Solid\", \"Casual\", \"Regular Fit\", 80, 9500, 600, 13, \"Images/puffer vest.jpeg\", \"Warm puffer vest for winter\", \"vest, puffer, casual\", 5000, 4.4,\"Male\"],\r\n    [60, \"Faux Leather Leggings\", \"Bottom Wear\", \"Leggings\", \"Winter\", 2023, \"Faux Leather\", \"Black\", \"Solid\", \"Casual\", \"Fitted\", 90, 13000, 650, 13, \"Images/faux legging.jpeg\", \"Trendy faux leather leggings for winter\", \"faux leather, leggings, casual\", 6000, 4.8,\"Female\"],\r\n    [61, \"Silk Scarves\", \"Accessories\", \"Scarves\", \"Spring\", 2023, \"Silk\", \"Red\", \"Solid\", \"Formal\", \"Long\", 85, 11000, 550, 12, \"Images/silk scarves.jpeg\", \"Elegant silk scarves for spring\", \"silk, scarves, formal\", 5000, 4.8,\"Female\"],\r\n    [62, \"Tweed Blazers\", \"Outerwear\", \"Blazers\", \"Winter\", 2023, \"Tweed\", \"Grey\", \"Solid\", \"Formal\", \"Fitted\", 90, 13000, 650, 13, \"Images/tweed blazer.jpeg\", \"Chic tweed blazers for winter\", \"tweed, blazers, formal\", 7000, 4.9,\"Female\"],\r\n    [63, \"Velvet Dresses\", \"Dress\", \"Dresses\", \"Winter\", 2023, \"Velvet\", \"Red\", \"Solid\", \"Formal\", \"Fitted\", 85, 11000, 550, 11, \"Images/velvet dresses.jpeg\", \"Luxurious velvet dresses for winter\", \"velvet, dresses, formal\", 6000, 4.7,\"Female\"],\r\n    [64, \"Plaid Flannel Shirt\", \"Top Wear\", \"Shirt\", \"Fall\", 2022, \"Cotton\", \"Red\", \"Plaid\", \"Casual\", \"Regular Fit\", 88, 12000, 750, 17, \"Images/plaid flannel shirt.jpeg\", \"Classic plaid flannel shirt\", \"shirt, flannel, plaid\", 6300, 4.6,\"Male\"],\r\n    [65, \"Polo Shirt\", \"Top Wear\", \"Shirt\", \"Summer\", 2022, \"Cotton\", \"Navy\", \"Solid\", \"Casual\", \"Regular Fit\", 85, 11500, 650, 15, \"Images/polo shirt.jpeg\", \"Classic polo shirt for summer\", \"shirt, polo, casual\", 5800, 4.5,\"Male\"],\r\n    [66, \"Floral Maxi Dresses\", \"Dress\", \"Dresses\", \"Spring\", 2023, \"Cotton\", \"Blue\", \"Floral\", \"Feminine\", \"Maxi\", 85, 11000, 550, 12, \"Images/floral maxi dresses.jpeg\", \"Beautiful floral maxi dresses for spring\", \"floral, maxi, feminine\", 6000, 4.8,\"Female\"],\r\n    [67, \"Quilted Jackets\", \"Outerwear\", \"Jackets\", \"Winter\", 2023, \"Polyester\", \"Black\", \"Solid\", \"Casual\", \"Quilted\", 90, 13000, 650, 13, \"Images/quilted jackets.jpeg\", \"Warm quilted jackets for winter\", \"quilted, jackets, casual\", 7000, 4.9,\"Female\"],\r\n    [68, \"Slouchy Beanies\", \"Accessories\", \"Hats\", \"Winter\", 2023, \"Wool\", \"Grey\", \"Solid\", \"Casual\", \"Slouchy\", 75, 9000, 400, 9, \"Images/slouchy beanies.jpeg\", \"Cozy slouchy beanies for winter\", \"beanies, hats, casual\", 4000, 4.5,\"Female\"],\r\n    [69, \"Off-Shoulder Dresses\", \"Dress\", \"Dresses\", \"Summer\", 2023, \"Cotton\", \"White\", \"Solid\", \"Feminine\", \"Off-Shoulder\", 85, 11000, 550, 11, \"Images/off shoulder dresses.jpeg\", \"Chic off-shoulder dresses for summer\", \"off-shoulder, dresses, feminine\", 5000, 4.7,\"Female\"],\r\n    [70, \"Hiking Boots\", \"Footwear\", \"Boots\", \"Fall\", 2022, \"Leather\", \"Brown\", \"Solid\", \"Sporty\", \"Ankle\", 80, 10000, 500, 10, \"Images/hiking boots.jpeg\", \"Durable hiking boots for fall\", \"hiking, boots, sporty\", 4500, 4.6,\"Male\"],\r\n    [71, \"Knitted Cardigans\", \"Outerwear\", \"Cardigans\", \"Winter\", 2023, \"Wool\", \"Beige\", \"Solid\", \"Casual\", \"Loose Fit\", 90, 13000, 650, 13, \"Images/knitted cardigans.jpeg\", \"Warm knitted cardigans for winter\", \"knitted, cardigans, casual\", 7000, 4.9,\"Female\"],\r\n    [72, \"Bell Sleeve Tops\", \"Top Wear\", \"Tops\", \"Spring\", 2023, \"Cotton\", \"Pink\", \"Solid\", \"Feminine\", \"Bell Sleeve\", 85, 11000, 550, 12, \"Images/bell sleeves.jpeg\", \"Trendy bell sleeve tops for spring\", \"bell sleeve, tops, feminine\", 5000, 4.8,\"Female\"],\r\n    [73, \"Utility Chic\", \"Top Wear\", \"Jackets\", \"Spring\", 2023, \"Cotton\", \"Khaki\", \"Solid\", \"Casual\", \"Oversized\", 80, 10000, 500, 10, \"Images/utility chic.jpeg\", \"Functional and stylish utility chic jackets for spring\", \"utility chic, jackets, spring\",4600,3.8,\"Female\"],\r\n    [74, \"Asymmetrical Dresses\", \"Dress\", \"Dresses\", \"Summer\", 2023, \"Silk\", \"Red\", \"Floral\", \"Feminine\", \"Asymmetrical\", 85, 11000, 550, 11, \"Images/asymmetric dresses.jpeg\", \"Elegant and eye-catching asymmetrical dresses for summer\", \"asymmetrical, dresses, summer\",5000,4.2,\"Female\"],\r\n    [75, \"Cropped Pants\", \"Bottom Wear\", \"Pants\", \"Fall\", 2022, \"Denim\", \"Blue\", \"Solid\", \"Casual\", \"Cropped\", 75, 9000, 400, 9, \"Images/cropped pants.jpeg\", \"Trendy and comfortable cropped pants for fall\", \"cropped, pants, denim\",5500,4.8,\"Female\"],\r\n    [76, \"Ruffled Blouses\", \"Top Wear\", \"Blouses\", \"Spring\", 2022, \"Cotton\", \"White\", \"Floral\", \"Feminine\", \"Ruffled\", 80, 10000, 500, 10, \"Images/ruffled blouses.jpeg\", \"Whimsical and romantic ruffled blouses for spring\", \"ruffles, blouses, spring\",5600,4.1,\"Female\"],\r\n    [77, \"Biker Shorts\", \"Bottom Wear\", \"Shorts\", \"Summer\", 2023, \"Polyester\", \"Black\", \"Solid\", \"Sporty\", \"Fitted\", 90, 12000, 600, 12, \"Images/biker shorts.jpeg\", \"Comfortable and stylish biker shorts for summer\", \"biker, shorts, summer\",6000,4.4,\"Female\"],\r\n    [78, \"Puff Sleeves\", \"Top Wear\", \"Tops\", \"Fall\", 2022, \"Cotton\", \"Yellow\", \"Solid\", \"Casual\", \"Puff Sleeves\", 70, 8000, 300, 8, \"Images/puff sleeves.jpeg\", \"Trendy and cozy puff sleeves for fall\", \"puff sleeves, tops, fall\",7000,4.4,\"Female\"],\r\n    [79, \"High-Low Dresses\", \"Dress\", \"Dresses\", \"Spring\", 2022, \"Silk\", \"Pink\", \"Floral\", \"Feminine\", \"High-Low\", 85, 11000, 550, 11, \"Images/high low dresses.jpeg\", \"Elegant and stylish high-low dresses for spring\", \"high-low, dresses, spring\",6000,3.9,\"Female\"],\r\n    [80, \"Corduroy Jackets\", \"Outerwear\", \"Jackets\", \"Fall\", 2022, \"Corduroy\", \"Brown\", \"Solid\", \"Casual\", \"Fitted\", 75, 9000, 400, 9, \"Images/coordrey jacket.jpeg\", \"Cozy and stylish corduroy jackets for fall\", \"corduroy, jackets, fall\",6000,4.3,\"Male\"],\r\n    [81, \"Khaki Shorts\", \"Bottom Wear\", \"Shorts\", \"Summer\", 2022, \"Cotton\", \"Khaki\", \"Solid\", \"Casual\", \"Regular Fit\", 87, 12500, 800, 18, \"Images/khaki shorts.jpeg\", \"Comfortable khaki shorts for summer\", \"shorts, khaki, casual\", 6700, 4.7,\"Male\"],\r\n    [82, \"Trench Coat\", \"Outerwear\", \"Coat\", \"Spring\", 2022, \"Cotton\", \"Beige\", \"Solid\", \"Formal\", \"Regular Fit\", 92, 15000, 900, 20, \"Images/trench coat.jpeg\", \"Stylish trench coat for spring\", \"coat, trench, formal\", 7200, 4.8,\"Male\"],\r\n    [83, \"Cardigan Sweater\", \"Top Wear\", \"Sweater\", \"Winter\", 2022, \"Wool\", \"Gray\", \"Solid\", \"Casual\", \"Regular Fit\", 80, 10000, 600, 12, \"Images/cardigan sweater.jpeg\", \"Warm cardigan sweater for winter\", \"sweater, cardigan, casual\", 5200, 4.5,\"Male\"],\r\n    [84, \"Slim Fit Suit\", \"Formal Wear\", \"Suit\", \"Fall\", 2022, \"Wool\", \"Black\", \"Solid\", \"Formal\", \"Slim Fit\", 95, 20000, 1000, 30, \"Images/slim fit suit.jpeg\", \"Elegant slim fit suit for formal occasions\", \"suit, slim fit, formal\", 8200, 4.9,\"Male\"],\r\n    [85, \"Leather Jacket\", \"Outerwear\", \"Jacket\", \"Winter\", 2022, \"Leather\", \"Brown\", \"Solid\", \"Casual\", \"Regular Fit\", 89, 16000, 850, 22, \"Images/leather jacket.jpeg\", \"Classic leather jacket for winter\", \"jacket, leather, casual\", 7000, 4.8,\"Male\"],\r\n    [86, \"Crew Neck Sweater\", \"Top Wear\", \"Sweater\", \"Fall\", 2022, \"Cotton\", \"Blue\", \"Solid\", \"Casual\", \"Regular Fit\", 84, 11000, 700, 14, \"Images/crew neck sweater.jpeg\", \"Comfortable crew neck sweater for fall\", \"sweater, crew neck, casual\", 5900, 4.6,\"Male\"],\r\n    [87, \"Tapered Jeans\", \"Bottom Wear\", \"Jeans\", \"Spring\", 2022, \"Denim\", \"Dark Blue\", \"Solid\", \"Casual\", \"Tapered Fit\", 88, 13000, 750, 19, \"Images/tapered jeans.jpeg\", \"Stylish tapered jeans for spring\", \"jeans, tapered, denim\", 6300, 4.7,\"Male\"],\r\n    [88, \"Oversized Hoodie\", \"Top Wear\", \"Hoodie\", \"Winter\", 2022, \"Cotton\", \"Black\", \"Solid\", \"Casual\", \"Oversized Fit\", 85, 14000, 800, 21, \"Images/oversized hoodie.jpeg\", \"Comfortable oversized hoodie for winter\", \"hoodie, oversized, casual\", 6800, 4.8,\"Male\"],\r\n    [89, \"Chambray Shirt\", \"Top Wear\", \"Shirt\", \"Spring\", 2022, \"Chambray\", \"Light Blue\", \"Solid\", \"Casual\", \"Regular Fit\", 86, 11500, 650, 16, \"Images/chambray shirt.jpeg\", \"Lightweight chambray shirt for spring\", \"shirt, chambray, casual\", 5800, 4.5,\"Male\"],\r\n    [90, \"Utility Vest\", \"Outerwear\", \"Vest\", \"Fall\", 2022, \"Polyester\", \"Olive\", \"Solid\", \"Casual\", \"Regular Fit\", 82, 10000, 600, 12, \"Images/utility vest.jpeg\", \"Practical utility vest for fall\", \"vest, utility, casual\", 5200, 4.4,\"Male\"],\r\n    [91, \"Slim Fit Dress Pants\", \"Formal Wear\", \"Pants\", \"Summer\", 2022, \"Wool\", \"Gray\", \"Solid\", \"Formal\", \"Slim Fit\", 90, 13500, 750,17, \"Images/slim fit dress pants.jpeg\", \"Elegant slim fit dress pants for formal occasions\", \"pants, dress, formal\", 6300, 4.7,\"Male\"],\r\n    [92, \"Oxford Shirt\", \"Top Wear\", \"Shirt\", \"Fall\", 2022, \"Cotton\", \"White\", \"Solid\", \"Formal\", \"Regular Fit\", 88, 12000, 700, 17, \"Images/oxford shirt.jpeg\", \"Classic oxford shirt for formal wear\", \"shirt, oxford, formal\", 6000, 4.6,\"Male\"],\r\n    [93, \"Quilted Jacket\", \"Outerwear\", \"Jacket\", \"Winter\", 2022, \"Polyester\", \"Navy\", \"Solid\", \"Casual\", \"Regular Fit\", 84, 11000, 650, 15, \"Images/quilted jacket.jpeg\", \"Warm quilted jacket for winter\", \"jacket, quilted, casual\", 5700, 4.5,\"Male\"],\r\n    [94, \"Athletic Shorts\", \"Sportswear\", \"Shorts\", \"Summer\", 2022, \"Polyester\", \"Black\", \"Solid\", \"Sportswear\", \"Regular Fit\", 85, 13000, 750, 18, \"Images/atheletic shorts.jpeg\", \"Comfortable athletic shorts for summer\", \"shorts, athletic, sportswear\", 6200, 4.6,\"Male\"],\r\n    [95, \"Sweatpants\", \"Bottom Wear\", \"Pants\", \"Winter\", 2022, \"Cotton\", \"Gray\", \"Solid\", \"Casual\", \"Regular Fit\", 83, 10500, 650, 13, \"Images/sweatpants.jpeg\", \"Cozy sweatpants for winter\", \"pants, sweat, casual\", 5400, 4.4,\"Male\"],\r\n    [96, \"V-Neck Sweater\", \"Top Wear\", \"Sweater\", \"Fall\", 2022, \"Cotton\", \"Maroon\", \"Solid\", \"Casual\", \"Regular Fit\", 86, 11500, 700, 16, \"Images/v-neck sweater.jpeg\", \"Comfortable v-neck sweater for fall\", \"sweater, v-neck, casual\", 5800, 4.5,\"Male\"],\r\n    [97, \"Hiking Boots\", \"Footwear\", \"Boots\", \"Fall\", 2022, \"Leather\", \"Brown\", \"Solid\", \"Casual\", \"Regular Fit\", 90, 15000, 800, 20, \"Images/hiking bootss.jpeg\", \"Durable hiking boots for outdoor adventures\", \"boots, hiking, casual\", 7000, 4.7,\"Male\"],\r\n    [98, \"Chelsea Boots\", \"Footwear\", \"Boots\", \"Winter\", 2022, \"Leather\", \"Black\", \"Solid\", \"Casual\", \"Regular Fit\", 92, 16000, 850, 22, \"Images/chelsea boots.jpeg\", \"Stylish chelsea boots for winter\", \"boots, chelsea, casual\", 7200, 4.8,\"Male\"],\r\n    [99, \"Track Jacket\", \"Sportswear\", \"Jacket\", \"Spring\", 2022, \"Polyester\", \"Blue\", \"Solid\", \"Sportswear\", \"Regular Fit\", 85, 13000, 700, 18, \"Images/track jacket.jpeg\", \"Lightweight track jacket for spring workouts\", \"jacket, track, sportswear\", 6200, 4.6,\"Male\"],\r\n    [100, \"Polo Dress Shirt\", \"Formal Wear\", \"Shirt\", \"Spring\", 2022, \"Cotton\", \"Light Blue\", \"Solid\", \"Formal\", \"Slim Fit\", 88, 12500, 750, 17, \"Images/polo shirt dress.jpeg\", \"Elegant polo dress shirt for formal wear\", \"shirt, polo, formal\", 6300, 4.7,\"Male\"],\r\n    [101, \"Leather Gloves\", \"Accessories\", \"Gloves\", \"Winter\", 2022, \"Leather\", \"Black\", \"Solid\", \"Formal\", \"Regular Fit\", 86, 11000, 650, 14, \"Images/leather gloves.jpeg\", \"Warm leather gloves for winter\", \"gloves, leather, formal\", 5900, 4.5,\"Male\"],\r\n    [102, \"Puffer Jacket\", \"Outerwear\", \"Jacket\", \"Winter\", 2022, \"Nylon\", \"Black\", \"Solid\", \"Casual\", \"Regular Fit\", 88, 14000, 800, 20, \"Images/puffer jacket man.jpeg\", \"Warm puffer jacket for winter\", \"jacket, puffer, casual\", 6700, 4.7,\"Male\"],\r\n    [103, \"Button Down Shirt\", \"Top Wear\", \"Shirt\", \"Summer\", 2022, \"Cotton\", \"White\", \"Solid\", \"Casual\", \"Regular Fit\", 87, 12000, 700, 16, \"Images/button down shirt man.jpeg\", \"Classic button down shirt for summer\", \"shirt, button down, casual\", 6100, 4.6,\"Male\"],\r\n    [104, \"Wool Overcoat\", \"Outerwear\", \"Coat\", \"Winter\", 2022, \"Wool\", \"Gray\", \"Solid\", \"Formal\", \"Regular Fit\", 93, 17000, 900, 25, \"Images/wool overcoat.jpeg\", \"Elegant wool overcoat for winter\", \"coat, wool, formal\", 7500, 4.8,\"Male\"],\r\n    [105, \"Sweater Vest\", \"Top Wear\", \"Vest\", \"Fall\", 2022, \"Cotton\", \"Navy\", \"Solid\", \"Casual\", \"Regular Fit\", 82, 10000, 600, 12, \"Images/sweater vest.jpeg\", \"Classic sweater vest for fall\", \"vest, sweater, casual\", 5200, 4.4,\"Male\"],\r\n    [106, \"Denim Shorts\", \"Bottom Wear\", \"Shorts\", \"Summer\", 2022, \"Denim\", \"Blue\", \"Solid\", \"Casual\", \"Regular Fit\", 86, 11500, 650, 15, \"Images/denim shorts men.jpeg\", \"Comfortable denim shorts for summer\", \"shorts, denim, casual\", 5700, 4.5,\"Male\"],\r\n    [107, \"Windbreaker\", \"Outerwear\", \"Jacket\", \"Spring\", 2022, \"Nylon\", \"Red\", \"Solid\", \"Sportswear\", \"Regular Fit\", 84, 12000, 700, 18, \"Images/windbreaker.jpeg\", \"Lightweight windbreaker for spring\", \"jacket, windbreaker, sportswear\", 6000, 4.6,\"Male\"],\r\n    [108, \"Athletic Hoodie\", \"Sportswear\", \"Hoodie\", \"Fall\", 2022, \"Polyester\", \"Gray\", \"Solid\", \"Sportswear\", \"Regular Fit\", 85, 13000, 750, 19, \"Images/athletic hoodie.jpeg\", \"Comfortable athletic hoodie for workouts\", \"hoodie, athletic, sportswear\", 6200, 4.7,\"Male\"],\r\n    [109, \"Loafers\", \"Footwear\", \"Shoes\", \"Spring\", 2022, \"Leather\", \"Brown\", \"Solid\", \"Casual\", \"Regular Fit\", 87, 12500, 700, 16, \"Images/loafers.jpeg\", \"Stylish loafers for spring\", \"shoes, loafers, casual\", 6100, 4.6,\"Male\"],\r\n    [110, \"Fleece Jacket\", \"Outerwear\", \"Jacket\", \"Winter\", 2022, \"Fleece\", \"Black\", \"Solid\", \"Casual\", \"Regular Fit\", 88, 14000, 800, 20, \"Images/fleece jacket.jpeg\", \"Warm fleece jacket for winter\", \"jacket, fleece, casual\", 6700, 4.7,\"Male\"],\r\n    [111, \"Tank Top\", \"Top Wear\", \"Tank\", \"Summer\", 2022, \"Cotton\", \"White\", \"Solid\", \"Casual\", \"Regular Fit\", 84, 11000, 650, 15, \"Images/tank top.jpeg\", \"Comfortable tank top for summer\", \"tank, top, casual\", 5700, 4.5,\"Male\"],\r\n    [112, \"Raincoat\", \"Outerwear\", \"Coat\", \"Spring\", 2022, \"Nylon\", \"Yellow\", \"Solid\", \"Casual\", \"Regular Fit\", 82, 10000, 600, 12, \"Images/raincoat.jpeg\", \"Lightweight raincoat for spring\", \"coat, rain, casual\", 5200, 4.4,\"Male\"],\r\n    [113, \"Turtle Neck Sweater\", \"Top Wear\", \"Sweater\", \"Winter\", 2022, \"Wool\", \"Black\", \"Solid\", \"Casual\", \"Regular Fit\", 90, 15000, 750, 18, \"Images/turtle neck sweater.jpeg\", \"Warm turtle neck sweater for winter\", \"sweater, turtle neck, casual\", 6300, 4.7,\"Male\"],\r\n    [114, \"Flip Flops\", \"Footwear\", \"Sandals\", \"Summer\", 2022, \"Rubber\", \"Black\", \"Solid\", \"Casual\", \"Regular Fit\", 80, 10000, 600, 10, \"Images/flip flops.jpeg\", \"Comfortable flip flops for summer\", \"sandals, flip flops, casual\", 5000, 4.4,\"Male\"],\r\n    [115, \"Corduroy Pants\", \"Bottom Wear\", \"Pants\", \"Fall\", 2022, \"Corduroy\", \"Brown\", \"Solid\", \"Casual\", \"Regular Fit\", 88, 13000, 750, 20, \"Images/corduroy pantsjpeg.jpeg\", \"Stylish corduroy pants for fall\", \"pants, corduroy, casual\", 6300, 4.7,\"Male\"],\r\n    [116, \"Performance T-shirt\", \"Top Wear\", \"T-shirt\", \"Summer\", 2022, \"Polyester\", \"Blue\", \"Solid\", \"Sportswear\", \"Regular Fit\", 85, 12000, 700, 16, \"Images/performance t-shirt.jpeg\", \"Lightweight performance t-shirt for workouts\", \"t-shirt, performance, sportswear\", 5900, 4.6,\"Male\"],\r\n    [117, \"Board Shorts\", \"Bottom Wear\", \"Shorts\", \"Summer\", 2022, \"Polyester\", \"Blue\", \"Solid\", \"Casual\", \"Regular Fit\", 87, 12500, 700, 16, \"Images/board shorts.jpeg\", \"Comfortable board shorts for summer\", \"shorts, board, casual\", 6100, 4.6,\"Male\"],\r\n    [118, \"Winter Beanie\", \"Accessories\", \"Hat\", \"Winter\", 2022, \"Wool\", \"Black\", \"Solid\", \"Casual\", \"Regular Fit\", 86, 11000, 650, 14, \"Images/winter beanie.jpeg\", \"Warm winter beanie for cold weather\", \"hat, beanie, casual\", 5900, 4.5,\"Male\"],\r\n    [119, \"Running Shoes\", \"Footwear\", \"Shoes\", \"Summer\", 2022, \"Mesh\", \"Gray\", \"Solid\", \"Sportswear\", \"Regular Fit\", 90, 15000, 800, 20, \"Images/running_shoes.jpeg\", \"Lightweight running shoes for workouts\", \"shoes, running, sportswear\", 7000, 4.7,\"Male\"],\r\n    [120, \"Dress Shoes\", \"Footwear\", \"Shoes\", \"Fall\", 2022, \"Leather\", \"Black\", \"Solid\", \"Formal\", \"Regular Fit\", 92, 16000, 850, 22, \"Images/dress_shoes.jpeg\", \"Elegant dress shoes for formal occasions\", \"shoes, dress, formal\", 7200, 4.8,\"Male\"],\r\n    [121, \"Beanie Hat\", \"Accessories\", \"Hat\", \"Winter\", 2022, \"Wool\", \"Black\", \"Solid\", \"Casual\", \"Regular Fit\", 83, 11500, 680, 12, \"Images/beanie_hat.jpeg\", \"Warm beanie hat for winter\", \"hat, beanie, casual\", 5300, 4.5,\"Male\"],\r\n    [122, \"Leather Gloves\", \"Accessories\", \"Gloves\", \"Winter\", 2022, \"Leather\", \"Brown\", \"Solid\", \"Formal\", \"Regular Fit\", 88, 13000, 750, 15, \"Images/leather_gloves.jpeg\", \"Elegant leather gloves for winter\", \"gloves, leather, formal\", 6200, 4.7,\"Male\"],\r\n    [123, \"Scarf\", \"Accessories\", \"Scarf\", \"Winter\", 2022, \"Wool\", \"Gray\", \"Solid\", \"Casual\", \"Regular Fit\", 86, 12000, 700, 13, \"Images/scarf.jpeg\", \"Cozy scarf for winter\", \"scarf, wool, casual\", 5900, 4.6,\"Female\"],\r\n    [124, \"Sunglasses\", \"Accessories\", \"Sunglasses\", \"Summer\", 2022, \"Plastic\", \"Black\", \"Solid\", \"Casual\", \"Regular Fit\", 90, 14000, 800, 20, \"Images/sunglasses.jpeg\", \"Stylish sunglasses for summer\", \"sunglasses, casual, summer\", 6800, 4.8,\"Female\"],\r\n    [125, \"Leather Wallet\", \"Accessories\", \"Wallet\", \"All Seasons\", 2022, \"Leather\", \"Black\", \"Solid\", \"Formal\", \"Regular Fit\", 92, 15000, 850, 22, \"Images/leather wallet.jpeg\", \"Elegant leather wallet for all occasions\", \"wallet, leather, formal\", 7200, 4.9,\"Male\"],\r\n    [126, \"Silk Tie\", \"Accessories\", \"Tie\", \"Fall\", 2022, \"Silk\", \"Red\", \"Solid\", \"Formal\", \"Regular Fit\", 87, 12000, 700, 15, \"Images/silk_tie.jpeg\", \"Elegant silk tie for formal occasions\", \"tie, silk, formal\", 6000, 4.7,\"Male\"],\r\n    [127, \"Cufflinks\", \"Accessories\", \"Cufflinks\", \"All Seasons\", 2022, \"Metal\", \"Silver\", \"Solid\", \"Formal\", \"Regular Fit\", 88, 13000, 750, 18, \"Images/cufflinks.jpeg\", \"Stylish cufflinks for formal occasions\", \"cufflinks, metal, formal\", 6500, 4.8,\"Male\"],\r\n    [128, \"Leather Bracelet\", \"Accessories\", \"Bracelet\", \"Summer\", 2022, \"Leather\", \"Brown\", \"Solid\", \"Casual\", \"Regular Fit\", 84, 11000, 650, 14, \"Images/leather_bracelet.jpeg\", \"Trendy leather bracelet for summer\", \"bracelet, leather, casual\", 5800, 4.6,\"Male\"],\r\n    [129, \"Sports Watch\", \"Accessories\", \"Watch\", \"All Seasons\", 2022, \"Rubber\", \"Black\", \"Solid\", \"Sportswear\", \"Regular Fit\", 90, 14000, 800, 20, \"Images/sports_watch.jpeg\", \"Durable sports watch for all seasons\", \"watch, sports, rubber\", 6800, 4.8,\"Male\"],\r\n    [130, \"Oxidised Jewellery\", \"Accessories\", \"Jewellery\", \"Spring\", 2023, \"Metal\", \"Silver\", \"Ornate\", \"Ethnic\", \"-\", 95, 11000, 550, 11, \"Images/oxidised_jewellery.jpeg\", \"Elegant oxidised jewellery for spring\", \"jewellery, oxidised, ethnic\", 4500, 4.6, \"Female\"],\r\n    [131, \"Pendants\", \"Accessories\", \"Jewellery\", \"Summer\", 2023, \"Metal\", \"Gold\", \"Solid\", \"Chic\", \"-\", 94, 10000, 500, 10, \"Images/pendants.jpeg\", \"Stylish pendants for summer\", \"pendants, jewellery, chic\", 4000, 4.5, \"Female\"],\r\n    [132, \"Scrunchies\", \"Accessories\", \"Hair Accessories\", \"Fall\", 2022, \"Fabric\", \"Multicolor\", \"Solid\", \"Casual\", \"-\", 90, 8000, 300, 8, \"Images/scrunchies.jpeg\", \"Colorful scrunchies for fall\", \"scrunchies, hair accessories, casual\", 2500, 4.4, \"Female\"],\r\n    [133, \"Bow\", \"Accessories\", \"Hair Accessories\", \"All Seasons\", 2023, \"Fabric\", \"Red\", \"Solid\", \"Cute\", \"-\", 94, 9000, 400, 9, \"Images/bow.jpeg\", \"Cute bows \", \"bow, hair accessories, cute\", 3000, 4.5, \"Female\"],\r\n    [134, \"Straight Jeans\", \"Bottom Wear\", \"Jeans\", \"Spring\", 2022, \"Denim\", \"Blue\", \"Solid\", \"Casual\", \"Straight Fit\", 91, 11000, 550, 11, \"Images/straight_ jeans.jpeg\", \"Comfortable straight jeans for spring\", \"jeans, straight, denim\", 4500, 4.6, \"Female\"],\r\n    [135, \"Mom Jeans\", \"Bottom Wear\", \"Jeans\", \"Summer\", 2023, \"Denim\", \"Light Blue\", \"Solid\", \"Casual\", \"Relaxed Fit\", 90, 12000, 600, 12, \"Images/mom jeans.jpeg\", \"Trendy mom jeans for summer\", \"jeans, mom, casual\", 5000, 4.7, \"Female\"]\r\n\r\n]\r\n# Convert to DataFrame\r\ncolumns = [\r\n    'Trend ID', 'Trend Name', 'Trend Type', 'Trend Subtype', 'Season', 'Year', 'Fabric',\r\n    'Color', 'Pattern', 'Style', 'Silhouette', 'Popularity Score', 'Search Volume',\r\n    'Social Media Mentions', 'Influencer Endorsements', 'Image URL', 'Description',\r\n    'Keywords', 'Sales', 'User Rating', 'Gender'\r\n]\r\n\r\ndf = pd.DataFrame(data, columns=columns)\r\n\r\n#title for our recommender\r\nst.markdown(\"<h1 style='text-align: center; color: #FF69B4; padding: 20px; font-size:45px'>Welcome to TrendFusion </h1>\", unsafe_allow_html=True)\r\n\r\n# Create a section for seasonal trends\r\nst.markdown(\"\"\"<style>\r\nimg {\r\n    border-radius: 10px;\r\n}\r\n</style>\r\n\"\"\", unsafe_allow_html=True)\r\nbutton_style = \"\"\"\r\n<style>\r\nbutton {\r\n    font-weight: bold;\r\n    font-size: 18px;\r\n    border-radius: 10px;\r\n    padding: 10px 20px;\r\n    margin: auto;\r\n    display: block;\r\n    background-color: #4CAF50;\r\n    color: #ffffff;\r\n    border: none;\r\n    cursor: pointer;\r\n}\r\n\r\n</style>\r\n\"\"\"\r\nst.markdown(button_style, unsafe_allow_html=True)\r\ndef get_top_trends(gender):\r\n    gender_df = df[df['Gender'] == gender]\r\n    if gender_df.empty:\r\n         return pd.DataFrame()  # Return an empty DataFrame instead of a string\r\n    else:\r\n         top_trends = gender_df.sort_values(by=['Popularity Score', 'Search Volume', 'Social Media Mentions'], ascending=False).head(21)\r\n         return top_trends\r\ndef sort_data_by_popularity(df):\r\n    return df.sort_values(by=['Popularity Score'], ascending=False)\r\n\r\ndef display_trends_for_gender(gender):\r\n    top_trends = get_top_trends(gender)\r\n    if not top_trends.empty:\r\n        col1, col2, col3 = st.columns(3)\r\n        col_counter = 0\r\n\r\n        for i, row in top_trends.iterrows():\r\n            # Select the current column\r\n            if col_counter == 0:\r\n                col = col1\r\n            elif col_counter == 1:\r\n                col = col2\r\n            else:\r\n                col = col3\r\n\r\n            # Display the image and text in the current column\r\n            with col:\r\n                st.image(row['Image URL'], width=200)\r\n                st.markdown(f\"### {row['Trend Name']}\")\r\n                st.markdown(f\"{row['Description']}\")\r\n                st.write(\"---\")\r\n\r\n            col_counter = (col_counter + 1) % 3\r\n    else:\r\n        st.write(f\"No {gender.lower()} trends available\")\r\n\r\n# Create tabs\r\ntab1, tab2, tab3, tab4 = st.tabs([\"Trends\", \"Analysis\",\"Personalization\",\"Seasonal Recommendation\"])\r\n\r\n# Create a section for men's trends\r\n# Tab 1: Trends\r\nwith tab1:\r\n    # Create a section for men's trends\r\n    st.markdown(\"\"\"<h2 style='text-align: center; color: #77DD77; padding: 20px; font-size:30px'>For Him </h2>\"\"\", unsafe_allow_html=True)\r\n\r\n    # Add a button to show/hide the trends\r\n    if st.button(\"Show Men's Trends\"):\r\n        st.write(\"### Men's Trends\")\r\n        display_trends_for_gender(\"Male\")\r\n\r\n    # Create a section for women's trends\r\n    st.markdown(\"\"\"<h2 style='text-align: center; color: #77DD77; padding: 20px; font-size:30px'>For Her </h2>\"\"\", unsafe_allow_html=True)\r\n\r\n    # Add a button to show/hide the trends\r\n    if st.button(\"Show Women's Trends\"):\r\n        st.write(\"### Women's Trends\")\r\n        display_trends_for_gender(\"Female\")\r\n# Tab 2: Analysis\r\nwith tab2:\r\n    # Add your analysis code here\r\n    options = df['Trend Type'].unique()\r\n    selected_option = st.selectbox(\"Select a trend type\", options)\r\n\r\n    # Filter the dataframe based on the selected option\r\n    filtered_df = df[df['Trend Type'] == selected_option]\r\n\r\n    # Sort the dataframe by popularity score in descending order\r\n    filtered_df = filtered_df.sort_values(by='Popularity Score', ascending=False)\r\n\r\n    # Display the selected items along with their images and popularity scores\r\n    cols_per_row = 3\r\n    rows = []\r\n    row = st.columns(cols_per_row)\r\n    rows.append(row)\r\n    for index, row_df in enumerate(filtered_df.itertuples()):\r\n        with rows[-1][index % cols_per_row]:\r\n            st.image(row_df[16])  # Assuming the 'Image URL' column is at index 16\r\n            st.write(f\" {row_df[2]}\")  # Assuming the 'Trend Name' column is at index 2\r\n            # st.write(f\"Popularity Score: {row_df[3]}\")  # Assuming the 'Popularity Score' column is at index 3\r\n            st.write(\"-----\")\r\n        if (index + 1) % cols_per_row == 0 and index != len(filtered_df) - 1:\r\n            row = st.columns(cols_per_row)\r\n            rows.append(row)\r\n\r\n\r\nwith tab3:\r\n    st.header(\"Personalized Recommendations\")\r\n\r\n    # Get user input\r\n    user_input = st.text_input(\"Enter keywords (separated by commas): \")\r\n    search_button = st.button(\"Search\")\r\n\r\n    if search_button:\r\n        # Split the input into individual keywords\r\n        keywords = [keyword.strip().lower() for keyword in user_input.replace(',', ' ').split()]\r\n\r\n        # Filter the dataframe to get rows that contain any of the keywords\r\n        recommended_df = df.copy()  # Create a copy of the original dataframe\r\n        mask = pd.Series([False] * len(df))\r\n        for keyword in keywords:\r\n\r\n            mask |= df.apply(lambda row: any(keyword in str(col).lower() for col in row), axis=1)\r\n        recommended_df = recommended_df[mask]\r\n\r\n\r\n\r\n        # Display the recommended trends\r\n        cols_per_row = 2\r\n        rows = []\r\n        row = st.columns(cols_per_row)\r\n        rows.append(row)\r\n        for index, row_df in enumerate(recommended_df.itertuples()):\r\n            with rows[-1][index % cols_per_row]:\r\n                st.image(row_df[16])  # Assuming the 'Image URL' column is at index 16\r\n                st.write(f\" {row_df[2]}\")  # Assuming the 'Trend Name' column is at index 2\r\n                st.write(\"-----\")\r\n            if (index + 1) % cols_per_row == 0 and index!= len(recommended_df) - 1:\r\n                row = st.columns(cols_per_row)\r\n                rows.append(row)\r\n\r\n\r\nwith tab4:\r\n    st.header(\"Seasonal Recommendations\")\r\n\r\n    # Create a container for each season\r\n    summer_container = st.container()\r\n    winter_container = st.container()\r\n    fall_container = st.container()\r\n    spring_container = st.container()\r\n\r\n    # Create columns for each season\r\n    summer_col, winter_col, fall_col, spring_col = st.columns(4)\r\n\r\n    # Add images for each season\r\n    with summer_col:\r\n        st.image(\"Images/summer_image.jpeg\", use_column_width=True)\r\n        summer_button = st.button(\"Show Summer Recommendations\")\r\n\r\n    with winter_col:\r\n        st.image(\"Images/winter_image.jpeg\", use_column_width=True)\r\n        winter_button = st.button(\"Show Winter Recommendations\")\r\n\r\n    with fall_col:\r\n        st.image(\"Images/fall_image.jpeg\", use_column_width=True)\r\n        fall_button = st.button(\"Show Fall Recommendations\")\r\n\r\n    with spring_col:\r\n        st.image(\"Images/spring_image.jpeg\", use_column_width=True)\r\n        spring_button = st.button(\"Show Spring Recommendations\")\r\n\r\n    # Show recommendations for each season\r\n    if summer_button:\r\n        with summer_container:\r\n            st.write(\"Summer Recommendations:\")\r\n            # Filter the dataframe to get summer recommendations\r\n            summer_recs = df[df['Season'] == 'Summer']\r\n            for i in range(0, len(summer_recs), 3):\r\n                cols = st.columns(3)  # Create 3 columns\r\n                for j in range(3):\r\n                    if i + j < len(summer_recs):\r\n                        with cols[j]:\r\n                            st.write(f\" {summer_recs.iloc[i+j]['Trend Name']}\")\r\n                            st.image(summer_recs.iloc[i+j]['Image URL'])\r\n                            st.write(\"-----\")\r\n\r\n    if winter_button:\r\n        with winter_container:\r\n            st.write(\"Winter Recommendations:\")\r\n            # Filter the dataframe to get winter recommendations\r\n            winter_recs = df[df['Season'] == 'Winter']\r\n            for i in range(0, len(winter_recs), 3):\r\n                cols = st.columns(3)  # Create 3 columns\r\n                for j in range(3):\r\n                    if i + j < len(winter_recs):\r\n                        with cols[j]:\r\n                            st.write(f\" {winter_recs.iloc[i+j]['Trend Name']}\")\r\n                            st.image(winter_recs.iloc[i+j]['Image URL'])\r\n                            st.write(\"-----\")\r\n\r\n    if fall_button:\r\n        with fall_container:\r\n            st.write(\"Fall Recommendations:\")\r\n            # Filter the dataframe to get fall recommendations\r\n            fall_recs = df[df['Season'] == 'Fall']\r\n            for i in range(0, len(fall_recs), 3):\r\n                cols = st.columns(3)  # Create 3 columns\r\n                for j in range(3):\r\n                    if i + j < len(fall_recs):\r\n                        with cols[j]:\r\n                            st.write(f\" {fall_recs.iloc[i+j]['Trend Name']}\")\r\n                            st.image(fall_recs.iloc[i+j]['Image URL'])\r\n                            st.write(\"-----\")\r\n\r\n    if spring_button:\r\n        with spring_container:\r\n            st.write(\"Spring Recommendations:\")\r\n            # Filter the dataframe to get spring recommendations\r\n            spring_recs = df[df['Season'] == 'Spring']\r\n            for i in range(0, len(spring_recs), 3):\r\n                cols = st.columns(3)  # Create 3 columns\r\n                for j in range(3):\r\n                    if i + j < len(spring_recs):\r\n                        with cols[j]:\r\n                            st.write(f\" {spring_recs.iloc[i+j]['Trend Name']}\")\r\n                            st.image(spring_recs.iloc[i+j]['Image URL'])\r\n                            st.write(\"-----\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 1e77fab6e7e36747082d68cef04693cd65f75f8d)
+++ b/main.py	(date 1720976298331)
@@ -1,11 +1,18 @@
 import streamlit as st
 import pandas as pd
+import matplotlib.pyplot as plt
+import seaborn as sns
+import numpy as np
+from scipy.stats import chi2_contingency
+from sklearn.cluster import KMeans
+from sklearn.decomposition import PCA
+from sklearn.preprocessing import LabelEncoder
+from statsmodels.tsa.seasonal import seasonal_decompose
 
 data = [
     [1, "Wide Leg Jeans", "Bottom Wear", "Jeans", "Spring", 2022, "Denim", "Blue", "Solid", "Casual", "Relaxed Fit", 80, 10000, 500, 10, "Images/wide leg jeans.jpeg", "Comfortable and stylish jeans for spring", "jeans, wide leg, denim", 5000, 4.5,"Female"],
     [2, "Chikankari Kurtas", "Top Wear", "Kurtas", "Summer", 2022, "Cotton", "White", "Floral", "Ethnic", "A-Line", 92, 8000, 300, 8, "Images/chikankari.jpeg", "Beautiful hand-embroidered kurtas for summer", "kurtas, chikankari, cotton", 3000, 4.7,"Female"],
     [3, "Cord Sets", "Dress", "Sets", "Fall", 2022, "Corduroy", "Brown", "Stripes", "Casual", "Slim Fit", 60, 6000, 200, 6, "Images/coord_Set.jpeg", "Cozy cord sets for fall", "cord, sets, fall fashion", 2000, 4.2,"Female"],
-    # [4, "Pastel Colors", "Color", "Pastel", "Spring", 2023, "-", "Pastel Pink", "-", "-", "-", 90, 12000, 600, 12, "Images/pastel_colors.jpg", "Soft and soothing pastel colors for spring", "pastel, colors, spring", 7000, 4.8,"Female"],
     [5, "Bell Bottoms", "Bottom Wear", "Jeans", "Summer", 2023, "Denim", "Black", "Solid", "Retro", "Flared", 85, 11000, 550, 11, "Images/bell bottoms.jpeg", "Groovy bell bottoms for summer", "bell bottoms, jeans, retro", 4500, 4.6,"Female"],
     [6, "Silk Blouses", "Top Wear", "Blouses", "Fall", 2022, "Silk", "Red", "Polka Dots", "Formal", "Fitted", 75, 9000, 400, 9, "Images/silk blouse.jpeg", "Luxurious silk blouses for fall", "silk, blouses, formal", 3500, 4.4,"Female"],
     [7, "Athleisure Wear", "Casual", "Athleisure", "Winter", 2023, "Polyester", "Grey", "Stripes", "Sporty", "Relaxed Fit", 95, 15000, 800, 15, "Images/athliesure.jpeg", "Comfortable athleisure wear for winter", "athleisure, sporty, winter", 10000, 4.9,"Female"],
@@ -215,7 +222,7 @@
         st.write(f"No {gender.lower()} trends available")
 
 # Create tabs
-tab1, tab2, tab3, tab4 = st.tabs(["Trends", "Analysis","Personalization","Seasonal Recommendation"])
+tab1, tab2, tab3, tab4, tab5 = st.tabs(["Trends", "Choose by category","Personalization","Seasonal Recommendation", "Analysis"])
 
 # Create a section for men's trends
 # Tab 1: Trends
@@ -235,9 +242,9 @@
     if st.button("Show Women's Trends"):
         st.write("### Women's Trends")
         display_trends_for_gender("Female")
-# Tab 2: Analysis
+
 with tab2:
-    # Add your analysis code here
+    # Choose by category
     options = df['Trend Type'].unique()
     selected_option = st.selectbox("Select a trend type", options)
 
@@ -384,3 +391,126 @@
                             st.write(f" {spring_recs.iloc[i+j]['Trend Name']}")
                             st.image(spring_recs.iloc[i+j]['Image URL'])
                             st.write("-----")
+
+with tab5:
+    st.title("Fashion Trends Analysis")
+
+# Extract color palettes
+    color_palettes = df['Color'].unique()
+
+# Extract fabric types
+    fabric_types = df['Fabric'].unique()
+
+# Extract garment types
+    garment_types = df['Trend Type'].unique()
+
+# Create a new dataframe with extracted features
+    features_df = pd.DataFrame({'Color Palette': df['Color'],
+                            'Fabric Type': df['Fabric'],
+                            'Garment Type': df['Trend Type']})
+
+# Display extracted features and dataframe
+    st.markdown("### Color Palettes:")
+    st.markdown(f"* {', '.join(color_palettes)}")
+    st.markdown("### Fabric Types:")
+    st.markdown(f"* {', '.join(fabric_types)}")
+    st.markdown("### Garment Types:")
+    st.markdown(f"* {', '.join(garment_types)}")
+
+    st.header("Features Dataframe")
+    st.dataframe(features_df, width=800, height=400)  # customize the table size
+
+# Plot seasonal trends
+    fig, ax = plt.subplots()
+    sns.countplot(x='Season', data=df, ax=ax)
+    ax.set_title('Seasonal Trends')
+    st.pyplot(fig)
+
+# Plot emerging styles
+    fig, ax = plt.subplots()
+    sns.countplot(x='Trend Subtype', data=df, ax=ax)
+    ax.set_title('Emerging Styles')
+    ax.tick_params(axis='x', labelrotation=90)  # Rotate x-axis labels by 90 degrees
+    st.pyplot(fig)
+
+# Calculate Cramer's V for each pair of categorical features
+    cramer_v_results = []
+    for col1 in features_df.columns:
+      for col2 in features_df.columns:
+        if col1 != col2:
+            contingency_table = pd.crosstab(features_df[col1], features_df[col2])
+            chi2, p, dof, expected = chi2_contingency(contingency_table)
+            n = contingency_table.sum().sum()
+            v = np.sqrt(chi2 / (n * min(dof, 1)))
+            cramer_v_results.append((col1, col2, v))
+
+# Display Cramer's V results in a table
+    st.header("Cramer's V Results")
+    cramer_v_df = pd.DataFrame(cramer_v_results, columns=["Feature 1", "Feature 2", "Cramer's V"])
+    st.dataframe(cramer_v_df, width=800, height=400)
+
+#clustering, dimensionality and time-series analysis
+    le = LabelEncoder()
+    df['Trend Type'] = le.fit_transform(df['Trend Type'])
+    df['Trend Subtype'] = le.fit_transform(df['Trend Subtype'])
+    df['Season'] = le.fit_transform(df['Season'])
+    df['Fabric'] = le.fit_transform(df['Fabric'])
+    df['Color'] = le.fit_transform(df['Color'])
+    df['Pattern'] = le.fit_transform(df['Pattern'])
+    df['Style'] = le.fit_transform(df['Style'])
+    df['Gender'] = le.fit_transform(df['Gender'])
+
+# features for clustering
+    features_df = df[['Trend Type', 'Trend Subtype', 'Season', 'Fabric', 'Color', 'Pattern', 'Style', 'Popularity Score', 'Search Volume', 'Social Media Mentions', 'Influencer Endorsements', 'Sales', 'User Rating']]
+
+# Perform K-Means clustering with different number of clusters
+    kmeans_3 = KMeans(n_clusters=3)
+    kmeans_3.fit(features_df)
+    labels_3 = kmeans_3.labels_
+
+    kmeans_4 = KMeans(n_clusters=4)
+    kmeans_4.fit(features_df)
+    labels_4 = kmeans_4.labels_
+
+    kmeans_5 = KMeans(n_clusters=5)
+    kmeans_5.fit(features_df)
+    labels_5 = kmeans_5.labels_
+
+
+    st.header("Elbow Method")
+    fig, ax = plt.subplots()
+    inertia_3 = kmeans_3.inertia_
+    inertia_4 = kmeans_4.inertia_
+    inertia_5 = kmeans_5.inertia_
+    ax.plot([3, 4, 5], [inertia_3, inertia_4, inertia_5])
+    ax.set_xlabel('Number of clusters')
+    ax.set_ylabel('Within-cluster sum of squares')
+    st.pyplot(fig)
+
+# Perform PCA
+    pca = PCA(n_components=2)
+    pca_features = pca.fit_transform(features_df)
+
+# Visualize the clusters in 2D PCA space
+    st.header("Clusters in 2D PCA Space")
+    fig, ax = plt.subplots(figsize=(10, 10))
+    sns.scatterplot(x=pca_features[:, 0], y=pca_features[:, 1], hue=labels_5, ax=ax)
+    ax.set_xlabel('PCA 1')
+    ax.set_ylabel('PCA 2')
+    st.pyplot(fig)
+
+    decomposition = seasonal_decompose(df['Popularity Score'], model='additive', period=4)
+
+
+    st.header("Seasonal Decomposition")
+    fig, axs = plt.subplots(4, 1, figsize=(10, 10))
+    axs[0].plot(df['Popularity Score'])
+    axs[0].set_title('Original Time Series')
+    axs[1].plot(decomposition.trend)
+    axs[1].set_title('Trend')
+    axs[2].plot(decomposition.seasonal)
+    axs[2].set_title('Seasonality')
+    axs[3].plot(decomposition.resid)
+    axs[3].set_title('Residuals')
+    st.pyplot(fig)
+
Index: Myntra (1).ipynb
===================================================================
diff --git a/Myntra (1).ipynb b/Myntra (1).ipynb
deleted file mode 100644
--- a/Myntra (1).ipynb	(revision 1e77fab6e7e36747082d68cef04693cd65f75f8d)
+++ /dev/null	(revision 1e77fab6e7e36747082d68cef04693cd65f75f8d)
@@ -1,2181 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "code",
-   "execution_count": 1,
-   "id": "999956a5-1807-4cc7-90ae-8b45f362675d",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "#step1 gathering and preprocessing of data\n",
-    "import pandas as pd"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 2,
-   "id": "4b6d1395-be77-4af0-93a4-56ea01855d1b",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "data = [\n",
-    "    [1, \"Wide Leg Jeans\", \"Bottom Wear\", \"Jeans\", \"Spring\", 2022, \"Denim\", \"Blue\", \"Solid\", \"Casual\", \"Relaxed Fit\", 80, 10000, 500, 10, \"Images/wide leg jeans.jpeg\", \"Comfortable and stylish jeans for spring\", \"jeans, wide leg, denim\", 5000, 4.5,\"Female\"],\n",
-    "    [2, \"Chikankari Kurtas\", \"Top Wear\", \"Kurtas\", \"Summer\", 2022, \"Cotton\", \"White\", \"Floral\", \"Ethnic\", \"A-Line\", 92, 8000, 300, 8, \"Images/chikankari.jpeg\", \"Beautiful hand-embroidered kurtas for summer\", \"kurtas, chikankari, cotton\", 3000, 4.7,\"Female\"],\n",
-    "    [3, \"Cord Sets\", \"Dress\", \"Sets\", \"Fall\", 2022, \"Corduroy\", \"Brown\", \"Stripes\", \"Casual\", \"Slim Fit\", 60, 6000, 200, 6, \"Images/coord_Set.jpeg\", \"Cozy cord sets for fall\", \"cord, sets, fall fashion\", 2000, 4.2,\"Female\"],\n",
-    "    # [4, \"Pastel Colors\", \"Color\", \"Pastel\", \"Spring\", 2023, \"-\", \"Pastel Pink\", \"-\", \"-\", \"-\", 90, 12000, 600, 12, \"Images/pastel_colors.jpg\", \"Soft and soothing pastel colors for spring\", \"pastel, colors, spring\", 7000, 4.8,\"Female\"],\n",
-    "    [5, \"Bell Bottoms\", \"Bottom Wear\", \"Jeans\", \"Summer\", 2023, \"Denim\", \"Black\", \"Solid\", \"Retro\", \"Flared\", 85, 11000, 550, 11, \"Images/bell bottoms.jpeg\", \"Groovy bell bottoms for summer\", \"bell bottoms, jeans, retro\", 4500, 4.6,\"Female\"],\n",
-    "    [6, \"Silk Blouses\", \"Top Wear\", \"Blouses\", \"Fall\", 2022, \"Silk\", \"Red\", \"Polka Dots\", \"Formal\", \"Fitted\", 75, 9000, 400, 9, \"Images/silk blouse.jpeg\", \"Luxurious silk blouses for fall\", \"silk, blouses, formal\", 3500, 4.4,\"Female\"],\n",
-    "    [7, \"Athleisure Wear\", \"Casual\", \"Athleisure\", \"Winter\", 2023, \"Polyester\", \"Grey\", \"Stripes\", \"Sporty\", \"Relaxed Fit\", 95, 15000, 800, 15, \"Images/athliesure.jpeg\", \"Comfortable athleisure wear for winter\", \"athleisure, sporty, winter\", 10000, 4.9,\"Female\"],\n",
-    "    [8, \"Ruffled Dresses\", \"Dress\", \"Dresses\", \"Spring\", 2022, \"Cotton\", \"Yellow\", \"Floral\", \"Feminine\", \"A-Line\", 80, 10000, 500, 10, \"Images/ruffke dresses.jpeg\", \"Whimsical ruffled dresses for spring\", \"ruffles, dresses, spring\", 5000, 4.6,\"Female\"],\n",
-    "    [9, \"Leather Jackets\", \"Outerwear\", \"Jackets\", \"Fall\", 2022, \"Leather\", \"Black\", \"Solid\", \"Edgy\", \"Fitted\", 85, 11000, 550, 11, \"Images/leather.jpeg\", \"Tough and stylish leather jackets for fall\", \"leather, jackets, edgy\", 4000, 4.7,\"Female\"],\n",
-    "    [10, \"Jumpsuits\", \"Dress\", \"Jumpsuits\", \"Summer\", 2023, \"Cotton\", \"White\", \"Solid\", \"Chic\", \"Bodycon\", 90, 12000, 600, 12, \"Images/jump suit.jpeg\", \"Stylish and comfortable jumpsuits for summer\", \"jumpsuits, summer, chic\", 7000, 4.8,\"Female\"],\n",
-    "    [11, \"High-Waisted Pants\", \"Bottom Wear\", \"Pants\", \"Spring\", 2022, \"Denim\", \"Blue\", \"Solid\", \"Casual\", \"High-Waisted\", 75, 9000, 400, 9, \"Images/high waisted.jpeg\", \"Trendy high-waisted pants for spring\", \"high-waisted, pants, denim\", 3000, 4.3,\"Female\"],\n",
-    "    [12, \"Crochet Tops\", \"Top Wear\", \"Tops\", \"Summer\", 2022, \"Cotton\", \"White\", \"Floral\", \"Bohemian\", \"Relaxed Fit\", 94, 8000, 300, 8, \"Images/crochet tops.jpeg\", \"Handmade crochet tops for summer\", \"crochet, tops, bohemian\", 2500, 4.5,\"Female\"],\n",
-    "    [13, \"Tie-Dye Shirts\", \"Top Wear\", \"Shirts\", \"Summer\", 2022, \"Cotton\", \"Multicolor\", \"Tie-Dye\", \"Casual\", \"Relaxed Fit\", 85, 11000, 550, 11, \"Images/tie dye.jpeg\", \"Colorful tie-dye shirts for summer\", \"tie-dye, shirts, casual\", 4500, 4.7,\"Female\"],\n",
-    "    [14, \"Plaid Flannel Shirts\", \"Casual\", \"Shirts\", \"Fall\", 2022, \"Cotton\", \"Red\", \"Plaid\", \"Casual\", \"Relaxed Fit\", 80, 10000, 500, 10, \"Images/plaid fannel.jpeg\", \"Cozy plaid flannel shirts for fall\", \"plaid, shirts, casual\", 4000, 4.6,\"Female\"],\n",
-    "    [15, \"Cargo Pants\", \"Bottom Wear\", \"Pants\", \"Spring\", 2023, \"Cotton\", \"Green\", \"Solid\", \"Casual\", \"Loose Fit\", 75, 9000, 400, 9, \"Images/cargo pants.jpeg\", \"Functional cargo pants for spring\", \"cargo, pants, casual\", 3000, 4.4,\"Female\"],\n",
-    "    [16, \"Maxi Dresses\", \"Dress\", \"Dresses\", \"Summer\", 2023, \"Cotton\", \"Blue\", \"Floral\", \"Feminine\", \"Flowy\", 95, 12000, 600, 12, \"Images/maxi dress.jpeg\", \"Elegant maxi dresses for summer\", \"maxi, dresses, feminine\", 6000, 4.8,\"Female\"],\n",
-    "    [17, \"Bomber Jackets\", \"Outerwear\", \"Jackets\", \"Fall\", 2022, \"Polyester\", \"Green\", \"Solid\", \"Casual\", \"Fitted\", 85, 11000, 550, 11, \"Images/bomber jacket.jpeg\", \"Trendy bomber jackets for fall\", \"bomber, jackets, casual\", 4500, 4.7,\"Female\"],\n",
-    "    [18, \"Puffer Jackets\", \"Outerwear\", \"Jackets\", \"Winter\", 2023, \"Nylon\", \"Black\", \"Solid\", \"Casual\", \"Oversized\", 90, 13000, 650, 13, \"Images/puffer jacket.jpeg\", \"Warm puffer jackets for winter\", \"puffer, jackets, casual\", 7500, 4.9,\"Female\"],\n",
-    "    [19, \"Oversized Hoodies\", \"Top Wear\", \"Hoodies\", \"Fall\", 2022, \"Cotton\", \"Grey\", \"Solid\", \"Casual\", \"Oversized\", 80, 10000, 500, 10, \"Images/oversized hoodies .jpeg\", \"Comfortable oversized hoodies for fall\", \"hoodies, casual, oversized\", 5000, 4.6,\"Female\"],\n",
-    "    [20, \"Skinny Jeans\", \"Bottom Wear\", \"Jeans\", \"Winter\", 2023, \"Denim\", \"Black\", \"Solid\", \"Casual\", \"Fitted\", 85, 11000, 550, 11, \"Images/skinny jeans.jpeg\", \"Trendy skinny jeans for winter\", \"skinny, jeans, casual\", 4000, 4.5,\"Female\"],\n",
-    "    [21, \"Midi Skirts\", \"Bottom Wear\", \"Skirts\", \"Spring\", 2023, \"Cotton\", \"Pink\", \"Solid\", \"Feminine\", \"A-Line\", 90, 12000, 600, 12, \"Images/midi skirts.jpeg\", \"Chic midi skirts for spring\", \"midi, skirts, feminine\", 5500, 4.8,\"Female\"],\n",
-    "    [22, \"Ankle Boots\", \"Footwear\", \"Boots\", \"Fall\", 2022, \"Leather\", \"Black\", \"Solid\", \"Casual\", \"Ankle\", 85, 11000, 550, 11, \"Images/ankle boots.jpeg\", \"Stylish ankle boots for fall\", \"ankle boots, casual, fall\", 4500, 4.7,\"Female\"],\n",
-    "    [23, \"Wide Brim Hats\", \"Accessories\", \"Hats\", \"Summer\", 2023, \"Straw\", \"Beige\", \"Solid\", \"Casual\", \"Wide Brim\", 75, 9000, 400, 9, \"Images/wide brim.jpeg\", \"Trendy wide brim hats for summer\", \"hats, wide brim, casual\", 3500, 4.4,\"Female\"],\n",
-    "    [24, \"Denim Shorts\", \"Bottom Wear\", \"Shorts\", \"Summer\", 2023, \"Denim\", \"Blue\", \"Solid\", \"Casual\", \"Fitted\", 80, 10000, 500, 10, \"Images/denim shorts.jpeg\", \"Comfortable denim shorts for summer\", \"shorts, denim, casual\", 4000, 4.6,\"Female\"],\n",
-    "    [25, \"Blazer Dresses\", \"Dress\", \"Dresses\", \"Winter\", 2023, \"Polyester\", \"Black\", \"Solid\", \"Formal\", \"Fitted\", 90, 13000, 650, 12, \"Images/blazer dress.jpeg\", \"Chic blazer dresses for winter\", \"blazer, dresses, formal\", 7000, 4.9,\"Female\"],\n",
-    "    [26, \"Kimono Cardigans\", \"Outerwear\", \"Cardigans\", \"Spring\", 2023, \"Cotton\", \"White\", \"Floral\", \"Bohemian\", \"Loose Fit\", 75, 9000, 400, 9, \"Images/kimono.jpeg\", \"Stylish kimono cardigans for spring\", \"kimono, cardigans, bohemian\", 3500, 4.5,\"Female\"],\n",
-    "    [27, \"Espadrilles\", \"Footwear\", \"Shoes\", \"Summer\", 2023, \"Canvas\", \"Beige\", \"Solid\", \"Casual\", \"Flat\", 80, 10000, 500, 10, \"Images/espadriel.jpeg\", \"Comfortable espadrilles for summer\", \"espadrilles, shoes, casual\", 4000, 4.6,\"Female\"],\n",
-    "    [28, \"Button-Up Shirts\", \"Casual\", \"Shirts\", \"Fall\", 2022, \"Cotton\", \"Blue\", \"Solid\", \"Casual\", \"Fitted\", 85, 11000, 550, 11, \"Images/buttonup shirts.jpeg\", \"Classic button-up shirts for fall\", \"button-up, shirts, casual\", 4500, 4.7,\"Female\"],\n",
-    "    [29, \"Faux Leather Leggings\", \"Bottom Wear\", \"Leggings\", \"Winter\", 2023, \"Faux Leather\", \"Black\", \"Solid\", \"Casual\", \"Fitted\", 90, 13000, 650, 13, \"Images/faux leggings.jpeg\", \"Trendy faux leather leggings for winter\", \"faux leather, leggings, casual\", 6000, 4.8,\"Female\"],\n",
-    "    [30, \"Graphic Tees\", \"Top Wear\", \"T-Shirts\", \"Spring\", 2023, \"Cotton\", \"White\", \"Graphic\", \"Casual\", \"Relaxed Fit\", 80, 10000, 500, 10, \"Images/graphic tees.jpeg\", \"Trendy graphic tees for spring\", \"graphic, tees, casual\", 4000, 4.6,\"Female\"],\n",
-    "    [31, \"Sweater Dresses\", \"Dress\", \"Dresses\", \"Winter\", 2023, \"Wool\", \"Grey\", \"Solid\", \"Casual\", \"Fitted\", 90, 13000, 650, 13, \"Images/sweater dress.jpeg\", \"Warm sweater dresses for winter\", \"sweater, dresses, casual\", 7000, 4.9,\"Female\"],\n",
-    "    [32, \"Chino Pants\", \"Bottom Wear\", \"Pants\", \"Spring\", 2023, \"Cotton\", \"Beige\", \"Solid\", \"Casual\", \"Slim Fit\", 75, 9000, 400, 9, \"Images/chino pants.jpeg\", \"Classic chino pants for spring\", \"chino, pants, casual\", 3500, 4.5,\"Female\"],\n",
-    "    [33, \"Lace Dresses\", \"Dress\", \"Dresses\", \"Summer\", 2023, \"Lace\", \"White\", \"Solid\", \"Feminine\", \"A-Line\", 92, 11000, 550, 11, \"Images/lace dresses.jpeg\", \"Elegant lace dresses for summer\", \"lace, dresses, feminine\", 5000, 4.7,\"Female\"],\n",
-    "    [34, \"Sherpa Jackets\", \"Outerwear\", \"Jackets\", \"Winter\", 2023, \"Sherpa\", \"White\", \"Solid\", \"Casual\", \"Oversized\", 90, 13000, 650, 14, \"Images/sherpa jacket.jpeg\", \"Cozy sherpa jackets for winter\", \"sherpa, jackets, casual\", 7000, 4.9,\"Female\"],\n",
-    "    [35, \"Peasant Tops\", \"Top Wear\", \"Tops\", \"Spring\", 2023, \"Cotton\", \"Yellow\", \"Floral\", \"Bohemian\", \"Relaxed Fit\", 75, 9000, 400, 9, \"Images/peasant tops.jpeg\", \"Boho peasant tops for spring\", \"peasant, tops, bohemian\", 3500, 4.4,\"Female\"],\n",
-    "    [36, \"Wide Leg Trousers\", \"Casual\", \"Trousers\", \"Fall\", 2022, \"Polyester\", \"Grey\", \"Solid\", \"Formal\", \"Wide Leg\", 80, 10000, 500, 10, \"Images/wide leg trousers.jpeg\", \"Stylish wide leg trousers for fall\", \"wide leg, trousers, formal\", 4000, 4.6,\"Female\"],\n",
-    "    [37, \"Kimono Dresses\", \"Dress\", \"Dresses\", \"Summer\", 2023, \"Silk\", \"Red\", \"Floral\", \"Feminine\", \"Wrap\", 85, 11000, 550, 11, \"Images/kimono dress.jpeg\", \"Elegant kimono dresses for summer\", \"kimono, dresses, feminine\", 5000, 4.7,\"Female\"],\n",
-    "    [38, \"Pencil Skirts\", \"Bottom Wear\", \"Skirts\", \"Winter\", 2023, \"Polyester\", \"Black\", \"Solid\", \"Formal\", \"Fitted\", 90, 13000, 650, 12, \"Images/pencil skirts.jpeg\", \"Chic pencil skirts for winter\", \"pencil, skirts, formal\", 6000, 4.8,\"Female\"],\n",
-    "    [39, \"Flannel Pajamas\", \"Sleepwear\", \"Pajamas\", \"Winter\", 2023, \"Flannel\", \"Red\", \"Plaid\", \"Casual\", \"Relaxed Fit\", 85, 11000, 550, 11, \"Images/flannel pajamasjpeg.jpeg\", \"Cozy flannel pajamas for winter\", \"pajamas, flannel, casual\", 4500, 4.7,\"Female\"],\n",
-    "    [40, \"Chiffon Blouses\", \"Top Wear\", \"Blouses\", \"Spring\", 2023, \"Chiffon\", \"Pink\", \"Solid\", \"Feminine\", \"Loose Fit\", 80, 10000, 500, 10, \"Images/chiffon blouses.jpeg\", \"Elegant chiffon blouses for spring\", \"chiffon, blouses, feminine\", 4000, 4.6,\"Female\"],\n",
-    "    [41, \"Turtleneck Sweaters\", \"Top Wear\", \"Sweaters\", \"Fall\", 2022, \"Wool\", \"Brown\", \"Solid\", \"Casual\", \"Fitted\", 90, 13000, 650, 14, \"Images/turtle necks.jpeg\", \"Warm turtleneck sweaters for fall\", \"turtleneck, sweaters, casual\", 7000, 4.9,\"Female\"],\n",
-    "    [42, \"Denim Jackets\", \"Outerwear\", \"Jackets\", \"Spring\", 2023, \"Denim\", \"Blue\", \"Solid\", \"Casual\", \"Fitted\", 85, 11000, 550, 12, \"Images/denim jackets.jpeg\", \"Classic denim jackets for spring\", \"denim, jackets, casual\", 5000, 4.7,\"Female\"],\n",
-    "    [43, \"Wrap Dresses\", \"Dress\", \"Dresses\", \"Summer\", 2023, \"Cotton\", \"Blue\", \"Solid\", \"Feminine\", \"Wrap\", 80, 10000, 500, 10, \"Images/wrap dresses.jpeg\", \"Chic wrap dresses for summer\", \"wrap, dresses, feminine\", 4500, 4.6,\"Female\"],\n",
-    "    [44, \"Platform Sneakers\", \"Footwear\", \"Sneakers\", \"Fall\", 2022, \"Canvas\", \"White\", \"Solid\", \"Casual\", \"Platform\", 75, 9000, 400, 9, \"Images/platform sneakers.jpeg\", \"Trendy platform sneakers for fall\", \"platform, sneakers, casual\", 3500, 4.4,\"Female\"],\n",
-    "    [45, \"Pleated Skirts\", \"Bottom Wear\", \"Skirts\", \"Spring\", 2023, \"Polyester\", \"Pink\", \"Solid\", \"Feminine\", \"Pleated\", 80, 10000, 500, 10, \"Images/pleated skirts.jpeg\", \"Chic pleated skirts for spring\", \"pleated, skirts, feminine\", 4000, 4.6,\"Female\"],\n",
-    "    [46, \"Chunky Sweaters\", \"Top Wear\", \"Sweaters\", \"Winter\", 2023, \"Wool\", \"Grey\", \"Solid\", \"Casual\", \"Oversized\", 85, 11000, 550, 11, \"Images/chunky sweaters.jpeg\", \"Cozy chunky sweaters for winter\", \"chunky, sweaters, casual\", 4500, 4.7,\"Female\"],\n",
-    "    [47, \"Harem Pants\", \"Bottom Wear\", \"Pants\", \"Summer\", 2023, \"Cotton\", \"Black\", \"Solid\", \"Casual\", \"Loose Fit\", 70, 8000, 300, 8, \"Images/harem pants.jpeg\", \"Comfortable harem pants for summer\", \"harem, pants, casual\", 3000, 4.5,\"Female\"],\n",
-    "    [48, \"Bardot Tops\", \"Top Wear\", \"Tops\", \"Spring\", 2023, \"Cotton\", \"White\", \"Solid\", \"Feminine\", \"Off-Shoulder\", 88, 9000, 400, 9, \"Images/bardot tops.jpeg\", \"Stylish bardot tops for spring\", \"bardot, tops, feminine\", 3500, 4.6,\"Female\"],\n",
-    "    [49, \"Bomber Jackets\", \"Outerwear\", \"Jackets\", \"Fall\", 2022, \"Polyester\", \"Green\", \"Solid\", \"Casual\", \"Fitted\", 85, 11000, 550, 11, \"Images/bomber jacket1.jpeg\", \"Trendy bomber jackets for fall\", \"bomber, jackets, casual\", 4500, 4.7,\"Female\"],\n",
-    "    [50, \"Puffer Jackets\", \"Outerwear\", \"Jackets\", \"Winter\", 2023, \"Nylon\", \"Black\", \"Solid\", \"Casual\", \"Oversized\", 90, 13000, 650, 13, \"Images/puffer jacket.jpeg\", \"Warm puffer jackets for winter\", \"puffer, jackets, casual\", 7500, 4.9,\"Female\"],\n",
-    "\n",
-    "    [51, \"Slim Fit Chinos\", \"Bottom Wear\", \"Chinos\", \"Summer\", 2022, \"Cotton\", \"Beige\", \"Solid\", \"Casual\", \"Slim Fit\", 85, 12000, 600, 15, \"Images/slim fit chinos.jpeg\", \"Trendy and comfortable chinos for summer\", \"chinos, slim fit, cotton\", 5500, 4.6,\"Male\"],\n",
-    "    [52, \"Graphic Tee\", \"Top Wear\", \"T-shirt\", \"Spring\", 2022, \"Cotton\", \"White\", \"Graphic\", \"Casual\", \"Regular Fit\", 87, 15000, 800, 20, \"Images/graphic tee.jpeg\", \"Cool graphic tee for casual wear\", \"t-shirt, graphic, casual\", 7000, 4.7,\"Male\"],\n",
-    "    [53, \"Bomber Jacket\", \"Outerwear\", \"Jacket\", \"Fall\", 2022, \"Polyester\", \"Black\", \"Solid\", \"Casual\", \"Regular Fit\", 75, 11000, 700, 12, \"Images/bomber jacket men.jpeg\", \"Stylish bomber jacket for fall\", \"jacket, bomber, casual\", 5200, 4.4,\"Male\"],\n",
-    "    [54, \"Linen Shirt\", \"Top Wear\", \"Shirt\", \"Summer\", 2022, \"Linen\", \"Light Blue\", \"Solid\", \"Casual\", \"Regular Fit\", 88, 13000, 750, 18, \"Images/linen shirt.jpeg\", \"Lightweight linen shirt for summer\", \"shirt, linen, casual\", 6300, 4.6,\"Male\"],\n",
-    "    [55, \"Cargo Pants\", \"Bottom Wear\", \"Pants\", \"Spring\", 2022, \"Cotton\", \"Olive Green\", \"Solid\", \"Casual\", \"Loose Fit\", 82, 10500, 650, 14, \"Images/cargo pants men.jpeg\", \"Practical and trendy cargo pants\", \"pants, cargo, casual\", 5400, 4.5,\"Male\"],\n",
-    "    [56, \"Denim Jacket\", \"Outerwear\", \"Jacket\", \"Spring\", 2022, \"Denim\", \"Blue\", \"Solid\", \"Casual\", \"Regular Fit\", 87, 14000, 850, 25, \"Images/denim jacket.jpeg\", \"Classic denim jacket for spring\", \"jacket, denim, casual\", 6800, 4.7,\"Male\"],\n",
-    "    [57, \"Henley Shirt\", \"Top Wear\", \"Shirt\", \"Fall\", 2022, \"Cotton\", \"Gray\", \"Solid\", \"Casual\", \"Regular Fit\", 78, 9000, 550, 10, \"Images/henley shirt.jpeg\", \"Comfortable henley shirt for fall\", \"shirt, henley, casual\", 4700, 4.3,\"Male\"],\n",
-    "    [58, \"Jogger Pants\", \"Sportswear\", \"Pants\", \"Winter\", 2022, \"Polyester\", \"Black\", \"Solid\", \"Casual\", \"Slim Fit\", 83, 11000, 700, 16, \"Images/jogger pants.jpeg\", \"Stylish jogger pants for winter\", \"pants, jogger, casual\", 5900, 4.5,\"Male\"],\n",
-    "    [59, \"Puffer Vest\", \"Outerwear\", \"Vest\", \"Winter\", 2022, \"Nylon\", \"Navy\", \"Solid\", \"Casual\", \"Regular Fit\", 80, 9500, 600, 13, \"Images/puffer vest.jpeg\", \"Warm puffer vest for winter\", \"vest, puffer, casual\", 5000, 4.4,\"Male\"],\n",
-    "    [60, \"Faux Leather Leggings\", \"Bottom Wear\", \"Leggings\", \"Winter\", 2023, \"Faux Leather\", \"Black\", \"Solid\", \"Casual\", \"Fitted\", 90, 13000, 650, 13, \"Images/faux legging.jpeg\", \"Trendy faux leather leggings for winter\", \"faux leather, leggings, casual\", 6000, 4.8,\"Female\"],\n",
-    "    [61, \"Silk Scarves\", \"Accessories\", \"Scarves\", \"Spring\", 2023, \"Silk\", \"Red\", \"Solid\", \"Formal\", \"Long\", 85, 11000, 550, 12, \"Images/silk scarves.jpeg\", \"Elegant silk scarves for spring\", \"silk, scarves, formal\", 5000, 4.8,\"Female\"],\n",
-    "    [62, \"Tweed Blazers\", \"Outerwear\", \"Blazers\", \"Winter\", 2023, \"Tweed\", \"Grey\", \"Solid\", \"Formal\", \"Fitted\", 90, 13000, 650, 13, \"Images/tweed blazer.jpeg\", \"Chic tweed blazers for winter\", \"tweed, blazers, formal\", 7000, 4.9,\"Female\"],\n",
-    "    [63, \"Velvet Dresses\", \"Dress\", \"Dresses\", \"Winter\", 2023, \"Velvet\", \"Red\", \"Solid\", \"Formal\", \"Fitted\", 85, 11000, 550, 11, \"Images/velvet dresses.jpeg\", \"Luxurious velvet dresses for winter\", \"velvet, dresses, formal\", 6000, 4.7,\"Female\"],\n",
-    "    [64, \"Plaid Flannel Shirt\", \"Top Wear\", \"Shirt\", \"Fall\", 2022, \"Cotton\", \"Red\", \"Plaid\", \"Casual\", \"Regular Fit\", 88, 12000, 750, 17, \"Images/plaid flannel shirt.jpeg\", \"Classic plaid flannel shirt\", \"shirt, flannel, plaid\", 6300, 4.6,\"Male\"],\n",
-    "    [65, \"Polo Shirt\", \"Top Wear\", \"Shirt\", \"Summer\", 2022, \"Cotton\", \"Navy\", \"Solid\", \"Casual\", \"Regular Fit\", 85, 11500, 650, 15, \"Images/polo shirt.jpeg\", \"Classic polo shirt for summer\", \"shirt, polo, casual\", 5800, 4.5,\"Male\"],\n",
-    "    [66, \"Floral Maxi Dresses\", \"Dress\", \"Dresses\", \"Spring\", 2023, \"Cotton\", \"Blue\", \"Floral\", \"Feminine\", \"Maxi\", 85, 11000, 550, 12, \"Images/floral maxi dresses.jpeg\", \"Beautiful floral maxi dresses for spring\", \"floral, maxi, feminine\", 6000, 4.8,\"Female\"],\n",
-    "    [67, \"Quilted Jackets\", \"Outerwear\", \"Jackets\", \"Winter\", 2023, \"Polyester\", \"Black\", \"Solid\", \"Casual\", \"Quilted\", 90, 13000, 650, 13, \"Images/quilted jackets.jpeg\", \"Warm quilted jackets for winter\", \"quilted, jackets, casual\", 7000, 4.9,\"Female\"],\n",
-    "    [68, \"Slouchy Beanies\", \"Accessories\", \"Hats\", \"Winter\", 2023, \"Wool\", \"Grey\", \"Solid\", \"Casual\", \"Slouchy\", 75, 9000, 400, 9, \"Images/slouchy beanies.jpeg\", \"Cozy slouchy beanies for winter\", \"beanies, hats, casual\", 4000, 4.5,\"Female\"],\n",
-    "    [69, \"Off-Shoulder Dresses\", \"Dress\", \"Dresses\", \"Summer\", 2023, \"Cotton\", \"White\", \"Solid\", \"Feminine\", \"Off-Shoulder\", 85, 11000, 550, 11, \"Images/off shoulder dresses.jpeg\", \"Chic off-shoulder dresses for summer\", \"off-shoulder, dresses, feminine\", 5000, 4.7,\"Female\"],\n",
-    "    [70, \"Hiking Boots\", \"Footwear\", \"Boots\", \"Fall\", 2022, \"Leather\", \"Brown\", \"Solid\", \"Sporty\", \"Ankle\", 80, 10000, 500, 10, \"Images/hiking boots.jpeg\", \"Durable hiking boots for fall\", \"hiking, boots, sporty\", 4500, 4.6,\"Male\"],\n",
-    "    [71, \"Knitted Cardigans\", \"Outerwear\", \"Cardigans\", \"Winter\", 2023, \"Wool\", \"Beige\", \"Solid\", \"Casual\", \"Loose Fit\", 90, 13000, 650, 13, \"Images/knitted cardigans.jpeg\", \"Warm knitted cardigans for winter\", \"knitted, cardigans, casual\", 7000, 4.9,\"Female\"],\n",
-    "    [72, \"Bell Sleeve Tops\", \"Top Wear\", \"Tops\", \"Spring\", 2023, \"Cotton\", \"Pink\", \"Solid\", \"Feminine\", \"Bell Sleeve\", 85, 11000, 550, 12, \"Images/bell sleeves.jpeg\", \"Trendy bell sleeve tops for spring\", \"bell sleeve, tops, feminine\", 5000, 4.8,\"Female\"],\n",
-    "    [73, \"Utility Chic\", \"Top Wear\", \"Jackets\", \"Spring\", 2023, \"Cotton\", \"Khaki\", \"Solid\", \"Casual\", \"Oversized\", 80, 10000, 500, 10, \"Images/utility chic.jpeg\", \"Functional and stylish utility chic jackets for spring\", \"utility chic, jackets, spring\",4600,3.8,\"Female\"],\n",
-    "    [74, \"Asymmetrical Dresses\", \"Dress\", \"Dresses\", \"Summer\", 2023, \"Silk\", \"Red\", \"Floral\", \"Feminine\", \"Asymmetrical\", 85, 11000, 550, 11, \"Images/asymmetric dresses.jpeg\", \"Elegant and eye-catching asymmetrical dresses for summer\", \"asymmetrical, dresses, summer\",5000,4.2,\"Female\"],\n",
-    "    [75, \"Cropped Pants\", \"Bottom Wear\", \"Pants\", \"Fall\", 2022, \"Denim\", \"Blue\", \"Solid\", \"Casual\", \"Cropped\", 75, 9000, 400, 9, \"Images/cropped pants.jpeg\", \"Trendy and comfortable cropped pants for fall\", \"cropped, pants, denim\",5500,4.8,\"Female\"],\n",
-    "    [76, \"Ruffled Blouses\", \"Top Wear\", \"Blouses\", \"Spring\", 2022, \"Cotton\", \"White\", \"Floral\", \"Feminine\", \"Ruffled\", 80, 10000, 500, 10, \"Images/ruffled blouses.jpeg\", \"Whimsical and romantic ruffled blouses for spring\", \"ruffles, blouses, spring\",5600,4.1,\"Female\"],\n",
-    "    [77, \"Biker Shorts\", \"Bottom Wear\", \"Shorts\", \"Summer\", 2023, \"Polyester\", \"Black\", \"Solid\", \"Sporty\", \"Fitted\", 90, 12000, 600, 12, \"Images/biker shorts.jpeg\", \"Comfortable and stylish biker shorts for summer\", \"biker, shorts, summer\",6000,4.4,\"Female\"],\n",
-    "    [78, \"Puff Sleeves\", \"Top Wear\", \"Tops\", \"Fall\", 2022, \"Cotton\", \"Yellow\", \"Solid\", \"Casual\", \"Puff Sleeves\", 70, 8000, 300, 8, \"Images/puff sleeves.jpeg\", \"Trendy and cozy puff sleeves for fall\", \"puff sleeves, tops, fall\",7000,4.4,\"Female\"],\n",
-    "    [79, \"High-Low Dresses\", \"Dress\", \"Dresses\", \"Spring\", 2022, \"Silk\", \"Pink\", \"Floral\", \"Feminine\", \"High-Low\", 85, 11000, 550, 11, \"Images/high low dresses.jpeg\", \"Elegant and stylish high-low dresses for spring\", \"high-low, dresses, spring\",6000,3.9,\"Female\"],\n",
-    "    [80, \"Corduroy Jackets\", \"Outerwear\", \"Jackets\", \"Fall\", 2022, \"Corduroy\", \"Brown\", \"Solid\", \"Casual\", \"Fitted\", 75, 9000, 400, 9, \"Images/coordrey jacket.jpeg\", \"Cozy and stylish corduroy jackets for fall\", \"corduroy, jackets, fall\",6000,4.3,\"Male\"],\n",
-    "    [81, \"Khaki Shorts\", \"Bottom Wear\", \"Shorts\", \"Summer\", 2022, \"Cotton\", \"Khaki\", \"Solid\", \"Casual\", \"Regular Fit\", 87, 12500, 800, 18, \"Images/khaki shorts.jpeg\", \"Comfortable khaki shorts for summer\", \"shorts, khaki, casual\", 6700, 4.7,\"Male\"],\n",
-    "    [82, \"Trench Coat\", \"Outerwear\", \"Coat\", \"Spring\", 2022, \"Cotton\", \"Beige\", \"Solid\", \"Formal\", \"Regular Fit\", 92, 15000, 900, 20, \"Images/trench coat.jpeg\", \"Stylish trench coat for spring\", \"coat, trench, formal\", 7200, 4.8,\"Male\"],\n",
-    "    [83, \"Cardigan Sweater\", \"Top Wear\", \"Sweater\", \"Winter\", 2022, \"Wool\", \"Gray\", \"Solid\", \"Casual\", \"Regular Fit\", 80, 10000, 600, 12, \"Images/cardigan sweater.jpeg\", \"Warm cardigan sweater for winter\", \"sweater, cardigan, casual\", 5200, 4.5,\"Male\"],\n",
-    "    [84, \"Slim Fit Suit\", \"Formal Wear\", \"Suit\", \"Fall\", 2022, \"Wool\", \"Black\", \"Solid\", \"Formal\", \"Slim Fit\", 95, 20000, 1000, 30, \"Images/slim fit suit.jpeg\", \"Elegant slim fit suit for formal occasions\", \"suit, slim fit, formal\", 8200, 4.9,\"Male\"],\n",
-    "    [85, \"Leather Jacket\", \"Outerwear\", \"Jacket\", \"Winter\", 2022, \"Leather\", \"Brown\", \"Solid\", \"Casual\", \"Regular Fit\", 89, 16000, 850, 22, \"Images/leather jacket.jpeg\", \"Classic leather jacket for winter\", \"jacket, leather, casual\", 7000, 4.8,\"Male\"],\n",
-    "    [86, \"Crew Neck Sweater\", \"Top Wear\", \"Sweater\", \"Fall\", 2022, \"Cotton\", \"Blue\", \"Solid\", \"Casual\", \"Regular Fit\", 84, 11000, 700, 14, \"Images/crew neck sweater.jpeg\", \"Comfortable crew neck sweater for fall\", \"sweater, crew neck, casual\", 5900, 4.6,\"Male\"],\n",
-    "    [87, \"Tapered Jeans\", \"Bottom Wear\", \"Jeans\", \"Spring\", 2022, \"Denim\", \"Dark Blue\", \"Solid\", \"Casual\", \"Tapered Fit\", 88, 13000, 750, 19, \"Images/tapered jeans.jpeg\", \"Stylish tapered jeans for spring\", \"jeans, tapered, denim\", 6300, 4.7,\"Male\"],\n",
-    "    [88, \"Oversized Hoodie\", \"Top Wear\", \"Hoodie\", \"Winter\", 2022, \"Cotton\", \"Black\", \"Solid\", \"Casual\", \"Oversized Fit\", 85, 14000, 800, 21, \"Images/oversized hoodie.jpeg\", \"Comfortable oversized hoodie for winter\", \"hoodie, oversized, casual\", 6800, 4.8,\"Male\"],\n",
-    "    [89, \"Chambray Shirt\", \"Top Wear\", \"Shirt\", \"Spring\", 2022, \"Chambray\", \"Light Blue\", \"Solid\", \"Casual\", \"Regular Fit\", 86, 11500, 650, 16, \"Images/chambray shirt.jpeg\", \"Lightweight chambray shirt for spring\", \"shirt, chambray, casual\", 5800, 4.5,\"Male\"],\n",
-    "    [90, \"Utility Vest\", \"Outerwear\", \"Vest\", \"Fall\", 2022, \"Polyester\", \"Olive\", \"Solid\", \"Casual\", \"Regular Fit\", 82, 10000, 600, 12, \"Images/utility vest.jpeg\", \"Practical utility vest for fall\", \"vest, utility, casual\", 5200, 4.4,\"Male\"],\n",
-    "    [91, \"Slim Fit Dress Pants\", \"Formal Wear\", \"Pants\", \"Summer\", 2022, \"Wool\", \"Gray\", \"Solid\", \"Formal\", \"Slim Fit\", 90, 13500, 750,17, \"Images/slim fit dress pants.jpeg\", \"Elegant slim fit dress pants for formal occasions\", \"pants, dress, formal\", 6300, 4.7,\"Male\"],\n",
-    "    [92, \"Oxford Shirt\", \"Top Wear\", \"Shirt\", \"Fall\", 2022, \"Cotton\", \"White\", \"Solid\", \"Formal\", \"Regular Fit\", 88, 12000, 700, 17, \"Images/oxford shirt.jpeg\", \"Classic oxford shirt for formal wear\", \"shirt, oxford, formal\", 6000, 4.6,\"Male\"],\n",
-    "    [93, \"Quilted Jacket\", \"Outerwear\", \"Jacket\", \"Winter\", 2022, \"Polyester\", \"Navy\", \"Solid\", \"Casual\", \"Regular Fit\", 84, 11000, 650, 15, \"Images/quilted jacket.jpeg\", \"Warm quilted jacket for winter\", \"jacket, quilted, casual\", 5700, 4.5,\"Male\"],\n",
-    "    [94, \"Athletic Shorts\", \"Sportswear\", \"Shorts\", \"Summer\", 2022, \"Polyester\", \"Black\", \"Solid\", \"Sportswear\", \"Regular Fit\", 85, 13000, 750, 18, \"Images/atheletic shorts.jpeg\", \"Comfortable athletic shorts for summer\", \"shorts, athletic, sportswear\", 6200, 4.6,\"Male\"],\n",
-    "    [95, \"Sweatpants\", \"Bottom Wear\", \"Pants\", \"Winter\", 2022, \"Cotton\", \"Gray\", \"Solid\", \"Casual\", \"Regular Fit\", 83, 10500, 650, 13, \"Images/sweatpants.jpeg\", \"Cozy sweatpants for winter\", \"pants, sweat, casual\", 5400, 4.4,\"Male\"],\n",
-    "    [96, \"V-Neck Sweater\", \"Top Wear\", \"Sweater\", \"Fall\", 2022, \"Cotton\", \"Maroon\", \"Solid\", \"Casual\", \"Regular Fit\", 86, 11500, 700, 16, \"Images/v-neck sweater.jpeg\", \"Comfortable v-neck sweater for fall\", \"sweater, v-neck, casual\", 5800, 4.5,\"Male\"],\n",
-    "    [97, \"Hiking Boots\", \"Footwear\", \"Boots\", \"Fall\", 2022, \"Leather\", \"Brown\", \"Solid\", \"Casual\", \"Regular Fit\", 90, 15000, 800, 20, \"Images/hiking bootss.jpeg\", \"Durable hiking boots for outdoor adventures\", \"boots, hiking, casual\", 7000, 4.7,\"Male\"],\n",
-    "    [98, \"Chelsea Boots\", \"Footwear\", \"Boots\", \"Winter\", 2022, \"Leather\", \"Black\", \"Solid\", \"Casual\", \"Regular Fit\", 92, 16000, 850, 22, \"Images/chelsea boots.jpeg\", \"Stylish chelsea boots for winter\", \"boots, chelsea, casual\", 7200, 4.8,\"Male\"],\n",
-    "    [99, \"Track Jacket\", \"Sportswear\", \"Jacket\", \"Spring\", 2022, \"Polyester\", \"Blue\", \"Solid\", \"Sportswear\", \"Regular Fit\", 85, 13000, 700, 18, \"Images/track jacket.jpeg\", \"Lightweight track jacket for spring workouts\", \"jacket, track, sportswear\", 6200, 4.6,\"Male\"],\n",
-    "    [100, \"Polo Dress Shirt\", \"Formal Wear\", \"Shirt\", \"Spring\", 2022, \"Cotton\", \"Light Blue\", \"Solid\", \"Formal\", \"Slim Fit\", 88, 12500, 750, 17, \"Images/polo shirt dress.jpeg\", \"Elegant polo dress shirt for formal wear\", \"shirt, polo, formal\", 6300, 4.7,\"Male\"],\n",
-    "    [101, \"Leather Gloves\", \"Accessories\", \"Gloves\", \"Winter\", 2022, \"Leather\", \"Black\", \"Solid\", \"Formal\", \"Regular Fit\", 86, 11000, 650, 14, \"Images/leather gloves.jpeg\", \"Warm leather gloves for winter\", \"gloves, leather, formal\", 5900, 4.5,\"Male\"],\n",
-    "    [102, \"Puffer Jacket\", \"Outerwear\", \"Jacket\", \"Winter\", 2022, \"Nylon\", \"Black\", \"Solid\", \"Casual\", \"Regular Fit\", 88, 14000, 800, 20, \"Images/puffer jacket man.jpeg\", \"Warm puffer jacket for winter\", \"jacket, puffer, casual\", 6700, 4.7,\"Male\"],\n",
-    "    [103, \"Button Down Shirt\", \"Top Wear\", \"Shirt\", \"Summer\", 2022, \"Cotton\", \"White\", \"Solid\", \"Casual\", \"Regular Fit\", 87, 12000, 700, 16, \"Images/button down shirt man.jpeg\", \"Classic button down shirt for summer\", \"shirt, button down, casual\", 6100, 4.6,\"Male\"],\n",
-    "    [104, \"Wool Overcoat\", \"Outerwear\", \"Coat\", \"Winter\", 2022, \"Wool\", \"Gray\", \"Solid\", \"Formal\", \"Regular Fit\", 93, 17000, 900, 25, \"Images/wool overcoat.jpeg\", \"Elegant wool overcoat for winter\", \"coat, wool, formal\", 7500, 4.8,\"Male\"],\n",
-    "    [105, \"Sweater Vest\", \"Top Wear\", \"Vest\", \"Fall\", 2022, \"Cotton\", \"Navy\", \"Solid\", \"Casual\", \"Regular Fit\", 82, 10000, 600, 12, \"Images/sweater vest.jpeg\", \"Classic sweater vest for fall\", \"vest, sweater, casual\", 5200, 4.4,\"Male\"],\n",
-    "    [106, \"Denim Shorts\", \"Bottom Wear\", \"Shorts\", \"Summer\", 2022, \"Denim\", \"Blue\", \"Solid\", \"Casual\", \"Regular Fit\", 86, 11500, 650, 15, \"Images/denim shorts men.jpeg\", \"Comfortable denim shorts for summer\", \"shorts, denim, casual\", 5700, 4.5,\"Male\"],\n",
-    "    [107, \"Windbreaker\", \"Outerwear\", \"Jacket\", \"Spring\", 2022, \"Nylon\", \"Red\", \"Solid\", \"Sportswear\", \"Regular Fit\", 84, 12000, 700, 18, \"Images/windbreaker.jpeg\", \"Lightweight windbreaker for spring\", \"jacket, windbreaker, sportswear\", 6000, 4.6,\"Male\"],\n",
-    "    [108, \"Athletic Hoodie\", \"Sportswear\", \"Hoodie\", \"Fall\", 2022, \"Polyester\", \"Gray\", \"Solid\", \"Sportswear\", \"Regular Fit\", 85, 13000, 750, 19, \"Images/athletic hoodie.jpeg\", \"Comfortable athletic hoodie for workouts\", \"hoodie, athletic, sportswear\", 6200, 4.7,\"Male\"],\n",
-    "    [109, \"Loafers\", \"Footwear\", \"Shoes\", \"Spring\", 2022, \"Leather\", \"Brown\", \"Solid\", \"Casual\", \"Regular Fit\", 87, 12500, 700, 16, \"Images/loafers.jpeg\", \"Stylish loafers for spring\", \"shoes, loafers, casual\", 6100, 4.6,\"Male\"],\n",
-    "    [110, \"Fleece Jacket\", \"Outerwear\", \"Jacket\", \"Winter\", 2022, \"Fleece\", \"Black\", \"Solid\", \"Casual\", \"Regular Fit\", 88, 14000, 800, 20, \"Images/fleece jacket.jpeg\", \"Warm fleece jacket for winter\", \"jacket, fleece, casual\", 6700, 4.7,\"Male\"],\n",
-    "    [111, \"Tank Top\", \"Top Wear\", \"Tank\", \"Summer\", 2022, \"Cotton\", \"White\", \"Solid\", \"Casual\", \"Regular Fit\", 84, 11000, 650, 15, \"Images/tank top.jpeg\", \"Comfortable tank top for summer\", \"tank, top, casual\", 5700, 4.5,\"Male\"],\n",
-    "    [112, \"Raincoat\", \"Outerwear\", \"Coat\", \"Spring\", 2022, \"Nylon\", \"Yellow\", \"Solid\", \"Casual\", \"Regular Fit\", 82, 10000, 600, 12, \"Images/raincoat.jpeg\", \"Lightweight raincoat for spring\", \"coat, rain, casual\", 5200, 4.4,\"Male\"],\n",
-    "    [113, \"Turtle Neck Sweater\", \"Top Wear\", \"Sweater\", \"Winter\", 2022, \"Wool\", \"Black\", \"Solid\", \"Casual\", \"Regular Fit\", 90, 15000, 750, 18, \"Images/turtle neck sweater.jpeg\", \"Warm turtle neck sweater for winter\", \"sweater, turtle neck, casual\", 6300, 4.7,\"Male\"],\n",
-    "    [114, \"Flip Flops\", \"Footwear\", \"Sandals\", \"Summer\", 2022, \"Rubber\", \"Black\", \"Solid\", \"Casual\", \"Regular Fit\", 80, 10000, 600, 10, \"Images/flip flops.jpeg\", \"Comfortable flip flops for summer\", \"sandals, flip flops, casual\", 5000, 4.4,\"Male\"],\n",
-    "    [115, \"Corduroy Pants\", \"Bottom Wear\", \"Pants\", \"Fall\", 2022, \"Corduroy\", \"Brown\", \"Solid\", \"Casual\", \"Regular Fit\", 88, 13000, 750, 20, \"Images/corduroy pantsjpeg.jpeg\", \"Stylish corduroy pants for fall\", \"pants, corduroy, casual\", 6300, 4.7,\"Male\"],\n",
-    "    [116, \"Performance T-shirt\", \"Top Wear\", \"T-shirt\", \"Summer\", 2022, \"Polyester\", \"Blue\", \"Solid\", \"Sportswear\", \"Regular Fit\", 85, 12000, 700, 16, \"Images/performance t-shirt.jpeg\", \"Lightweight performance t-shirt for workouts\", \"t-shirt, performance, sportswear\", 5900, 4.6,\"Male\"],\n",
-    "    [117, \"Board Shorts\", \"Bottom Wear\", \"Shorts\", \"Summer\", 2022, \"Polyester\", \"Blue\", \"Solid\", \"Casual\", \"Regular Fit\", 87, 12500, 700, 16, \"Images/board shorts.jpeg\", \"Comfortable board shorts for summer\", \"shorts, board, casual\", 6100, 4.6,\"Male\"],\n",
-    "    [118, \"Winter Beanie\", \"Accessories\", \"Hat\", \"Winter\", 2022, \"Wool\", \"Black\", \"Solid\", \"Casual\", \"Regular Fit\", 86, 11000, 650, 14, \"Images/winter beanie.jpeg\", \"Warm winter beanie for cold weather\", \"hat, beanie, casual\", 5900, 4.5,\"Male\"],\n",
-    "    [119, \"Running Shoes\", \"Footwear\", \"Shoes\", \"Summer\", 2022, \"Mesh\", \"Gray\", \"Solid\", \"Sportswear\", \"Regular Fit\", 90, 15000, 800, 20, \"Images/running_shoes.jpeg\", \"Lightweight running shoes for workouts\", \"shoes, running, sportswear\", 7000, 4.7,\"Male\"],\n",
-    "    [120, \"Dress Shoes\", \"Footwear\", \"Shoes\", \"Fall\", 2022, \"Leather\", \"Black\", \"Solid\", \"Formal\", \"Regular Fit\", 92, 16000, 850, 22, \"Images/dress_shoes.jpeg\", \"Elegant dress shoes for formal occasions\", \"shoes, dress, formal\", 7200, 4.8,\"Male\"],\n",
-    "    [121, \"Beanie Hat\", \"Accessories\", \"Hat\", \"Winter\", 2022, \"Wool\", \"Black\", \"Solid\", \"Casual\", \"Regular Fit\", 83, 11500, 680, 12, \"Images/beanie_hat.jpeg\", \"Warm beanie hat for winter\", \"hat, beanie, casual\", 5300, 4.5,\"Male\"],\n",
-    "    [122, \"Leather Gloves\", \"Accessories\", \"Gloves\", \"Winter\", 2022, \"Leather\", \"Brown\", \"Solid\", \"Formal\", \"Regular Fit\", 88, 13000, 750, 15, \"Images/leather_gloves.jpeg\", \"Elegant leather gloves for winter\", \"gloves, leather, formal\", 6200, 4.7,\"Male\"],\n",
-    "    [123, \"Scarf\", \"Accessories\", \"Scarf\", \"Winter\", 2022, \"Wool\", \"Gray\", \"Solid\", \"Casual\", \"Regular Fit\", 86, 12000, 700, 13, \"Images/scarf.jpeg\", \"Cozy scarf for winter\", \"scarf, wool, casual\", 5900, 4.6,\"Female\"],\n",
-    "    [124, \"Sunglasses\", \"Accessories\", \"Sunglasses\", \"Summer\", 2022, \"Plastic\", \"Black\", \"Solid\", \"Casual\", \"Regular Fit\", 90, 14000, 800, 20, \"Images/sunglasses.jpeg\", \"Stylish sunglasses for summer\", \"sunglasses, casual, summer\", 6800, 4.8,\"Female\"],\n",
-    "    [125, \"Leather Wallet\", \"Accessories\", \"Wallet\", \"All Seasons\", 2022, \"Leather\", \"Black\", \"Solid\", \"Formal\", \"Regular Fit\", 92, 15000, 850, 22, \"Images/leather wallet.jpeg\", \"Elegant leather wallet for all occasions\", \"wallet, leather, formal\", 7200, 4.9,\"Male\"],\n",
-    "    [126, \"Silk Tie\", \"Accessories\", \"Tie\", \"Fall\", 2022, \"Silk\", \"Red\", \"Solid\", \"Formal\", \"Regular Fit\", 87, 12000, 700, 15, \"Images/silk_tie.jpeg\", \"Elegant silk tie for formal occasions\", \"tie, silk, formal\", 6000, 4.7,\"Male\"],\n",
-    "    [127, \"Cufflinks\", \"Accessories\", \"Cufflinks\", \"All Seasons\", 2022, \"Metal\", \"Silver\", \"Solid\", \"Formal\", \"Regular Fit\", 88, 13000, 750, 18, \"Images/cufflinks.jpeg\", \"Stylish cufflinks for formal occasions\", \"cufflinks, metal, formal\", 6500, 4.8,\"Male\"],\n",
-    "    [128, \"Leather Bracelet\", \"Accessories\", \"Bracelet\", \"Summer\", 2022, \"Leather\", \"Brown\", \"Solid\", \"Casual\", \"Regular Fit\", 84, 11000, 650, 14, \"Images/leather_bracelet.jpeg\", \"Trendy leather bracelet for summer\", \"bracelet, leather, casual\", 5800, 4.6,\"Male\"],\n",
-    "    [129, \"Sports Watch\", \"Accessories\", \"Watch\", \"All Seasons\", 2022, \"Rubber\", \"Black\", \"Solid\", \"Sportswear\", \"Regular Fit\", 90, 14000, 800, 20, \"Images/sports_watch.jpeg\", \"Durable sports watch for all seasons\", \"watch, sports, rubber\", 6800, 4.8,\"Male\"],\n",
-    "    [130, \"Oxidised Jewellery\", \"Accessories\", \"Jewellery\", \"Spring\", 2023, \"Metal\", \"Silver\", \"Ornate\", \"Ethnic\", \"-\", 95, 11000, 550, 11, \"Images/oxidised_jewellery.jpeg\", \"Elegant oxidised jewellery for spring\", \"jewellery, oxidised, ethnic\", 4500, 4.6, \"Female\"],\n",
-    "    [131, \"Pendants\", \"Accessories\", \"Jewellery\", \"Summer\", 2023, \"Metal\", \"Gold\", \"Solid\", \"Chic\", \"-\", 94, 10000, 500, 10, \"Images/pendants.jpeg\", \"Stylish pendants for summer\", \"pendants, jewellery, chic\", 4000, 4.5, \"Female\"],\n",
-    "    [132, \"Scrunchies\", \"Accessories\", \"Hair Accessories\", \"Fall\", 2022, \"Fabric\", \"Multicolor\", \"Solid\", \"Casual\", \"-\", 90, 8000, 300, 8, \"Images/scrunchies.jpeg\", \"Colorful scrunchies for fall\", \"scrunchies, hair accessories, casual\", 2500, 4.4, \"Female\"],\n",
-    "    [133, \"Bow\", \"Accessories\", \"Hair Accessories\", \"All Seasons\", 2023, \"Fabric\", \"Red\", \"Solid\", \"Cute\", \"-\", 94, 9000, 400, 9, \"Images/bow.jpeg\", \"Cute bows \", \"bow, hair accessories, cute\", 3000, 4.5, \"Female\"],\n",
-    "    [134, \"Straight Jeans\", \"Bottom Wear\", \"Jeans\", \"Spring\", 2022, \"Denim\", \"Blue\", \"Solid\", \"Casual\", \"Straight Fit\", 91, 11000, 550, 11, \"Images/straight_ jeans.jpeg\", \"Comfortable straight jeans for spring\", \"jeans, straight, denim\", 4500, 4.6, \"Female\"],\n",
-    "    [135, \"Mom Jeans\", \"Bottom Wear\", \"Jeans\", \"Summer\", 2023, \"Denim\", \"Light Blue\", \"Solid\", \"Casual\", \"Relaxed Fit\", 90, 12000, 600, 12, \"Images/mom jeans.jpeg\", \"Trendy mom jeans for summer\", \"jeans, mom, casual\", 5000, 4.7, \"Female\"]\n",
-    "\n",
-    "]\n",
-    "columns = [\n",
-    "    'Trend ID', 'Trend Name', 'Trend Type', 'Trend Subtype', 'Season', 'Year', 'Fabric',\n",
-    "    'Color', 'Pattern', 'Style', 'Silhouette', 'Popularity Score', 'Search Volume',\n",
-    "    'Social Media Mentions', 'Influencer Endorsements', 'Image URL', 'Description',\n",
-    "    'Keywords', 'Sales', 'User Rating', 'Gender'\n",
-    "]\n",
-    "df = pd.DataFrame(data, columns=columns)\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 3,
-   "id": "f86a400f-d3a7-41c1-84d8-3201dc50ce98",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "df.to_csv(\"trends_data.csv\",index= False)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
-   "id": "8d390de5-fa7e-47e8-9fe4-52ef269ade3b",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/html": [
-       "<div>\n",
-       "<style scoped>\n",
-       "    .dataframe tbody tr th:only-of-type {\n",
-       "        vertical-align: middle;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe tbody tr th {\n",
-       "        vertical-align: top;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe thead th {\n",
-       "        text-align: right;\n",
-       "    }\n",
-       "</style>\n",
-       "<table border=\"1\" class=\"dataframe\">\n",
-       "  <thead>\n",
-       "    <tr style=\"text-align: right;\">\n",
-       "      <th></th>\n",
-       "      <th>Trend ID</th>\n",
-       "      <th>Trend Name</th>\n",
-       "      <th>Trend Type</th>\n",
-       "      <th>Trend Subtype</th>\n",
-       "      <th>Season</th>\n",
-       "      <th>Year</th>\n",
-       "      <th>Fabric</th>\n",
-       "      <th>Color</th>\n",
-       "      <th>Pattern</th>\n",
-       "      <th>Style</th>\n",
-       "      <th>...</th>\n",
-       "      <th>Popularity Score</th>\n",
-       "      <th>Search Volume</th>\n",
-       "      <th>Social Media Mentions</th>\n",
-       "      <th>Influencer Endorsements</th>\n",
-       "      <th>Image URL</th>\n",
-       "      <th>Description</th>\n",
-       "      <th>Keywords</th>\n",
-       "      <th>Sales</th>\n",
-       "      <th>User Rating</th>\n",
-       "      <th>Gender</th>\n",
-       "    </tr>\n",
-       "  </thead>\n",
-       "  <tbody>\n",
-       "    <tr>\n",
-       "      <th>0</th>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>...</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>1</th>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>...</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>2</th>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>...</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>3</th>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>...</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>4</th>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>...</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>...</th>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>129</th>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>...</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>130</th>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>...</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>131</th>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>...</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>132</th>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>...</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>133</th>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>...</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "      <td>False</td>\n",
-       "    </tr>\n",
-       "  </tbody>\n",
-       "</table>\n",
-       "<p>134 rows × 21 columns</p>\n",
-       "</div>"
-      ],
-      "text/plain": [
-       "     Trend ID  Trend Name  Trend Type  Trend Subtype  Season   Year  Fabric  \\\n",
-       "0       False       False       False          False   False  False   False   \n",
-       "1       False       False       False          False   False  False   False   \n",
-       "2       False       False       False          False   False  False   False   \n",
-       "3       False       False       False          False   False  False   False   \n",
-       "4       False       False       False          False   False  False   False   \n",
-       "..        ...         ...         ...            ...     ...    ...     ...   \n",
-       "129     False       False       False          False   False  False   False   \n",
-       "130     False       False       False          False   False  False   False   \n",
-       "131     False       False       False          False   False  False   False   \n",
-       "132     False       False       False          False   False  False   False   \n",
-       "133     False       False       False          False   False  False   False   \n",
-       "\n",
-       "     Color  Pattern  Style  ...  Popularity Score  Search Volume  \\\n",
-       "0    False    False  False  ...             False          False   \n",
-       "1    False    False  False  ...             False          False   \n",
-       "2    False    False  False  ...             False          False   \n",
-       "3    False    False  False  ...             False          False   \n",
-       "4    False    False  False  ...             False          False   \n",
-       "..     ...      ...    ...  ...               ...            ...   \n",
-       "129  False    False  False  ...             False          False   \n",
-       "130  False    False  False  ...             False          False   \n",
-       "131  False    False  False  ...             False          False   \n",
-       "132  False    False  False  ...             False          False   \n",
-       "133  False    False  False  ...             False          False   \n",
-       "\n",
-       "     Social Media Mentions  Influencer Endorsements  Image URL  Description  \\\n",
-       "0                    False                    False      False        False   \n",
-       "1                    False                    False      False        False   \n",
-       "2                    False                    False      False        False   \n",
-       "3                    False                    False      False        False   \n",
-       "4                    False                    False      False        False   \n",
-       "..                     ...                      ...        ...          ...   \n",
-       "129                  False                    False      False        False   \n",
-       "130                  False                    False      False        False   \n",
-       "131                  False                    False      False        False   \n",
-       "132                  False                    False      False        False   \n",
-       "133                  False                    False      False        False   \n",
-       "\n",
-       "     Keywords  Sales  User Rating  Gender  \n",
-       "0       False  False        False   False  \n",
-       "1       False  False        False   False  \n",
-       "2       False  False        False   False  \n",
-       "3       False  False        False   False  \n",
-       "4       False  False        False   False  \n",
-       "..        ...    ...          ...     ...  \n",
-       "129     False  False        False   False  \n",
-       "130     False  False        False   False  \n",
-       "131     False  False        False   False  \n",
-       "132     False  False        False   False  \n",
-       "133     False  False        False   False  \n",
-       "\n",
-       "[134 rows x 21 columns]"
-      ]
-     },
-     "execution_count": 4,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "df.isnull()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 5,
-   "id": "6f2aba2e-0ce9-4487-b38e-818b551e4ef2",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/html": [
-       "<div>\n",
-       "<style scoped>\n",
-       "    .dataframe tbody tr th:only-of-type {\n",
-       "        vertical-align: middle;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe tbody tr th {\n",
-       "        vertical-align: top;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe thead th {\n",
-       "        text-align: right;\n",
-       "    }\n",
-       "</style>\n",
-       "<table border=\"1\" class=\"dataframe\">\n",
-       "  <thead>\n",
-       "    <tr style=\"text-align: right;\">\n",
-       "      <th></th>\n",
-       "      <th>Trend ID</th>\n",
-       "      <th>Trend Name</th>\n",
-       "      <th>Trend Type</th>\n",
-       "      <th>Trend Subtype</th>\n",
-       "      <th>Season</th>\n",
-       "      <th>Year</th>\n",
-       "      <th>Fabric</th>\n",
-       "      <th>Color</th>\n",
-       "      <th>Pattern</th>\n",
-       "      <th>Style</th>\n",
-       "      <th>...</th>\n",
-       "      <th>Popularity Score</th>\n",
-       "      <th>Search Volume</th>\n",
-       "      <th>Social Media Mentions</th>\n",
-       "      <th>Influencer Endorsements</th>\n",
-       "      <th>Image URL</th>\n",
-       "      <th>Description</th>\n",
-       "      <th>Keywords</th>\n",
-       "      <th>Sales</th>\n",
-       "      <th>User Rating</th>\n",
-       "      <th>Gender</th>\n",
-       "    </tr>\n",
-       "  </thead>\n",
-       "  <tbody>\n",
-       "    <tr>\n",
-       "      <th>0</th>\n",
-       "      <td>1</td>\n",
-       "      <td>Wide Leg Jeans</td>\n",
-       "      <td>Bottom Wear</td>\n",
-       "      <td>Jeans</td>\n",
-       "      <td>Spring</td>\n",
-       "      <td>2022</td>\n",
-       "      <td>Denim</td>\n",
-       "      <td>Blue</td>\n",
-       "      <td>Solid</td>\n",
-       "      <td>Casual</td>\n",
-       "      <td>...</td>\n",
-       "      <td>80</td>\n",
-       "      <td>10000</td>\n",
-       "      <td>500</td>\n",
-       "      <td>10</td>\n",
-       "      <td>Images/wide leg jeans.jpeg</td>\n",
-       "      <td>Comfortable and stylish jeans for spring</td>\n",
-       "      <td>jeans, wide leg, denim</td>\n",
-       "      <td>5000</td>\n",
-       "      <td>4.5</td>\n",
-       "      <td>Female</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>1</th>\n",
-       "      <td>2</td>\n",
-       "      <td>Chikankari Kurtas</td>\n",
-       "      <td>Top Wear</td>\n",
-       "      <td>Kurtas</td>\n",
-       "      <td>Summer</td>\n",
-       "      <td>2022</td>\n",
-       "      <td>Cotton</td>\n",
-       "      <td>White</td>\n",
-       "      <td>Floral</td>\n",
-       "      <td>Ethnic</td>\n",
-       "      <td>...</td>\n",
-       "      <td>92</td>\n",
-       "      <td>8000</td>\n",
-       "      <td>300</td>\n",
-       "      <td>8</td>\n",
-       "      <td>Images/chikankari.jpeg</td>\n",
-       "      <td>Beautiful hand-embroidered kurtas for summer</td>\n",
-       "      <td>kurtas, chikankari, cotton</td>\n",
-       "      <td>3000</td>\n",
-       "      <td>4.7</td>\n",
-       "      <td>Female</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>2</th>\n",
-       "      <td>3</td>\n",
-       "      <td>Cord Sets</td>\n",
-       "      <td>Dress</td>\n",
-       "      <td>Sets</td>\n",
-       "      <td>Fall</td>\n",
-       "      <td>2022</td>\n",
-       "      <td>Corduroy</td>\n",
-       "      <td>Brown</td>\n",
-       "      <td>Stripes</td>\n",
-       "      <td>Casual</td>\n",
-       "      <td>...</td>\n",
-       "      <td>60</td>\n",
-       "      <td>6000</td>\n",
-       "      <td>200</td>\n",
-       "      <td>6</td>\n",
-       "      <td>Images/coord_Set.jpeg</td>\n",
-       "      <td>Cozy cord sets for fall</td>\n",
-       "      <td>cord, sets, fall fashion</td>\n",
-       "      <td>2000</td>\n",
-       "      <td>4.2</td>\n",
-       "      <td>Female</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>3</th>\n",
-       "      <td>5</td>\n",
-       "      <td>Bell Bottoms</td>\n",
-       "      <td>Bottom Wear</td>\n",
-       "      <td>Jeans</td>\n",
-       "      <td>Summer</td>\n",
-       "      <td>2023</td>\n",
-       "      <td>Denim</td>\n",
-       "      <td>Black</td>\n",
-       "      <td>Solid</td>\n",
-       "      <td>Retro</td>\n",
-       "      <td>...</td>\n",
-       "      <td>85</td>\n",
-       "      <td>11000</td>\n",
-       "      <td>550</td>\n",
-       "      <td>11</td>\n",
-       "      <td>Images/bell bottoms.jpeg</td>\n",
-       "      <td>Groovy bell bottoms for summer</td>\n",
-       "      <td>bell bottoms, jeans, retro</td>\n",
-       "      <td>4500</td>\n",
-       "      <td>4.6</td>\n",
-       "      <td>Female</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>4</th>\n",
-       "      <td>6</td>\n",
-       "      <td>Silk Blouses</td>\n",
-       "      <td>Top Wear</td>\n",
-       "      <td>Blouses</td>\n",
-       "      <td>Fall</td>\n",
-       "      <td>2022</td>\n",
-       "      <td>Silk</td>\n",
-       "      <td>Red</td>\n",
-       "      <td>Polka Dots</td>\n",
-       "      <td>Formal</td>\n",
-       "      <td>...</td>\n",
-       "      <td>75</td>\n",
-       "      <td>9000</td>\n",
-       "      <td>400</td>\n",
-       "      <td>9</td>\n",
-       "      <td>Images/silk blouse.jpeg</td>\n",
-       "      <td>Luxurious silk blouses for fall</td>\n",
-       "      <td>silk, blouses, formal</td>\n",
-       "      <td>3500</td>\n",
-       "      <td>4.4</td>\n",
-       "      <td>Female</td>\n",
-       "    </tr>\n",
-       "  </tbody>\n",
-       "</table>\n",
-       "<p>5 rows × 21 columns</p>\n",
-       "</div>"
-      ],
-      "text/plain": [
-       "   Trend ID         Trend Name   Trend Type Trend Subtype  Season  Year  \\\n",
-       "0         1     Wide Leg Jeans  Bottom Wear         Jeans  Spring  2022   \n",
-       "1         2  Chikankari Kurtas     Top Wear        Kurtas  Summer  2022   \n",
-       "2         3          Cord Sets        Dress          Sets    Fall  2022   \n",
-       "3         5       Bell Bottoms  Bottom Wear         Jeans  Summer  2023   \n",
-       "4         6       Silk Blouses     Top Wear       Blouses    Fall  2022   \n",
-       "\n",
-       "     Fabric  Color     Pattern   Style  ... Popularity Score  Search Volume  \\\n",
-       "0     Denim   Blue       Solid  Casual  ...               80          10000   \n",
-       "1    Cotton  White      Floral  Ethnic  ...               92           8000   \n",
-       "2  Corduroy  Brown     Stripes  Casual  ...               60           6000   \n",
-       "3     Denim  Black       Solid   Retro  ...               85          11000   \n",
-       "4      Silk    Red  Polka Dots  Formal  ...               75           9000   \n",
-       "\n",
-       "   Social Media Mentions  Influencer Endorsements                   Image URL  \\\n",
-       "0                    500                       10  Images/wide leg jeans.jpeg   \n",
-       "1                    300                        8      Images/chikankari.jpeg   \n",
-       "2                    200                        6       Images/coord_Set.jpeg   \n",
-       "3                    550                       11    Images/bell bottoms.jpeg   \n",
-       "4                    400                        9     Images/silk blouse.jpeg   \n",
-       "\n",
-       "                                    Description                    Keywords  \\\n",
-       "0      Comfortable and stylish jeans for spring      jeans, wide leg, denim   \n",
-       "1  Beautiful hand-embroidered kurtas for summer  kurtas, chikankari, cotton   \n",
-       "2                       Cozy cord sets for fall    cord, sets, fall fashion   \n",
-       "3                Groovy bell bottoms for summer  bell bottoms, jeans, retro   \n",
-       "4               Luxurious silk blouses for fall       silk, blouses, formal   \n",
-       "\n",
-       "  Sales  User Rating  Gender  \n",
-       "0  5000          4.5  Female  \n",
-       "1  3000          4.7  Female  \n",
-       "2  2000          4.2  Female  \n",
-       "3  4500          4.6  Female  \n",
-       "4  3500          4.4  Female  \n",
-       "\n",
-       "[5 rows x 21 columns]"
-      ]
-     },
-     "execution_count": 5,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "df.head()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 7,
-   "id": "b221d1b4-959b-47b0-9cb2-eda5662f2b41",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "#step2:extracting key features from data\n",
-    "# Extract color palettes\n",
-    "color_palettes = df['Color'].unique()\n",
-    "\n",
-    "# Extract fabric types\n",
-    "fabric_types = df['Fabric'].unique()\n",
-    "\n",
-    "# Extract garment types\n",
-    "garment_types = df['Trend Type'].unique()\n",
-    "\n",
-    "# Create a new dataframe with extracted features\n",
-    "features_df = pd.DataFrame({'Color Palette': df['Color'], \n",
-    "                            'Fabric Type': df['Fabric'], \n",
-    "                            'Garment Type': df['Trend Type']})"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 8,
-   "id": "4f5dc00e-bb4d-45c8-98a3-f45e516fdb48",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/html": [
-       "<div>\n",
-       "<style scoped>\n",
-       "    .dataframe tbody tr th:only-of-type {\n",
-       "        vertical-align: middle;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe tbody tr th {\n",
-       "        vertical-align: top;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe thead th {\n",
-       "        text-align: right;\n",
-       "    }\n",
-       "</style>\n",
-       "<table border=\"1\" class=\"dataframe\">\n",
-       "  <thead>\n",
-       "    <tr style=\"text-align: right;\">\n",
-       "      <th></th>\n",
-       "      <th>Color Palette</th>\n",
-       "      <th>Fabric Type</th>\n",
-       "      <th>Garment Type</th>\n",
-       "    </tr>\n",
-       "  </thead>\n",
-       "  <tbody>\n",
-       "    <tr>\n",
-       "      <th>0</th>\n",
-       "      <td>Blue</td>\n",
-       "      <td>Denim</td>\n",
-       "      <td>Bottom Wear</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>1</th>\n",
-       "      <td>White</td>\n",
-       "      <td>Cotton</td>\n",
-       "      <td>Top Wear</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>2</th>\n",
-       "      <td>Brown</td>\n",
-       "      <td>Corduroy</td>\n",
-       "      <td>Dress</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>3</th>\n",
-       "      <td>Black</td>\n",
-       "      <td>Denim</td>\n",
-       "      <td>Bottom Wear</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>4</th>\n",
-       "      <td>Red</td>\n",
-       "      <td>Silk</td>\n",
-       "      <td>Top Wear</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>...</th>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>129</th>\n",
-       "      <td>Gold</td>\n",
-       "      <td>Metal</td>\n",
-       "      <td>Accessories</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>130</th>\n",
-       "      <td>Multicolor</td>\n",
-       "      <td>Fabric</td>\n",
-       "      <td>Accessories</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>131</th>\n",
-       "      <td>Red</td>\n",
-       "      <td>Fabric</td>\n",
-       "      <td>Accessories</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>132</th>\n",
-       "      <td>Blue</td>\n",
-       "      <td>Denim</td>\n",
-       "      <td>Bottom Wear</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>133</th>\n",
-       "      <td>Light Blue</td>\n",
-       "      <td>Denim</td>\n",
-       "      <td>Bottom Wear</td>\n",
-       "    </tr>\n",
-       "  </tbody>\n",
-       "</table>\n",
-       "<p>134 rows × 3 columns</p>\n",
-       "</div>"
-      ],
-      "text/plain": [
-       "    Color Palette Fabric Type Garment Type\n",
-       "0            Blue       Denim  Bottom Wear\n",
-       "1           White      Cotton     Top Wear\n",
-       "2           Brown    Corduroy        Dress\n",
-       "3           Black       Denim  Bottom Wear\n",
-       "4             Red        Silk     Top Wear\n",
-       "..            ...         ...          ...\n",
-       "129          Gold       Metal  Accessories\n",
-       "130    Multicolor      Fabric  Accessories\n",
-       "131           Red      Fabric  Accessories\n",
-       "132          Blue       Denim  Bottom Wear\n",
-       "133    Light Blue       Denim  Bottom Wear\n",
-       "\n",
-       "[134 rows x 3 columns]"
-      ]
-     },
-     "execution_count": 8,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "features_df"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 17,
-   "id": "2075ae7a-5d6e-414e-a33e-2616175b8e72",
-   "metadata": {},
-   "outputs": [
-    {
-     "ename": "SyntaxError",
-     "evalue": "invalid syntax (2640350371.py, line 1)",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[1;36m  Cell \u001b[1;32mIn[17], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    pip install numpy\u001b[0m\n\u001b[1;37m        ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
-     ]
-    }
-   ],
-   "source": [
-    "pip install numpy\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 18,
-   "id": "0f1cee14-346a-415e-a328-c9357c7fe2df",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Requirement already satisfied: scikit-learn in c:\\users\\hp\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (1.5.0)\n",
-      "Requirement already satisfied: numpy>=1.19.5 in c:\\users\\hp\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from scikit-learn) (1.26.4)\n",
-      "Requirement already satisfied: scipy>=1.6.0 in c:\\users\\hp\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from scikit-learn) (1.13.1)\n",
-      "Requirement already satisfied: joblib>=1.2.0 in c:\\users\\hp\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from scikit-learn) (1.4.2)\n",
-      "Requirement already satisfied: threadpoolctl>=3.1.0 in c:\\users\\hp\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from scikit-learn) (3.5.0)\n",
-      "Note: you may need to restart the kernel to use updated packages.\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "\n",
-      "[notice] A new release of pip is available: 24.1 -> 24.1.2\n",
-      "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
-     ]
-    }
-   ],
-   "source": [
-    "pip install scikit-learn"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 19,
-   "id": "c1147969-e063-471e-bb6b-010b5094730f",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Collecting pyitlib\n",
-      "  Using cached pyitlib-0.2.3-py3-none-any.whl\n",
-      "Requirement already satisfied: pandas>=0.20.2 in c:\\users\\hp\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from pyitlib) (2.2.2)\n",
-      "Requirement already satisfied: numpy>=1.9.2 in c:\\users\\hp\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from pyitlib) (1.26.4)\n",
-      "Collecting scikit-learn<=0.24,>=0.16.0 (from pyitlib)\n",
-      "  Using cached scikit-learn-0.24.0.tar.gz (7.4 MB)\n",
-      "  Installing build dependencies: started\n",
-      "  Installing build dependencies: still running...\n",
-      "  Installing build dependencies: finished with status 'done'\n",
-      "  Getting requirements to build wheel: started\n",
-      "  Getting requirements to build wheel: finished with status 'done'\n",
-      "  Preparing metadata (pyproject.toml): started\n",
-      "  Preparing metadata (pyproject.toml): finished with status 'done'\n",
-      "Requirement already satisfied: scipy>=1.0.1 in c:\\users\\hp\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from pyitlib) (1.13.1)\n",
-      "Collecting future>=0.16.0 (from pyitlib)\n",
-      "  Using cached future-1.0.0-py3-none-any.whl.metadata (4.0 kB)\n",
-      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\hp\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from pandas>=0.20.2->pyitlib) (2.9.0.post0)\n",
-      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\hp\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from pandas>=0.20.2->pyitlib) (2024.1)\n",
-      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\hp\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from pandas>=0.20.2->pyitlib) (2024.1)\n",
-      "Requirement already satisfied: joblib>=0.11 in c:\\users\\hp\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from scikit-learn<=0.24,>=0.16.0->pyitlib) (1.4.2)\n",
-      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\users\\hp\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from scikit-learn<=0.24,>=0.16.0->pyitlib) (3.5.0)\n",
-      "Requirement already satisfied: six>=1.5 in c:\\users\\hp\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from python-dateutil>=2.8.2->pandas>=0.20.2->pyitlib) (1.16.0)\n",
-      "Using cached future-1.0.0-py3-none-any.whl (491 kB)\n",
-      "Building wheels for collected packages: scikit-learn\n",
-      "  Building wheel for scikit-learn (pyproject.toml): started\n",
-      "  Building wheel for scikit-learn (pyproject.toml): finished with status 'error'\n",
-      "Failed to build scikit-learn\n",
-      "Note: you may need to restart the kernel to use updated packages.\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "  error: subprocess-exited-with-error\n",
-      "  \n",
-      "  Building wheel for scikit-learn (pyproject.toml) did not run successfully.\n",
-      "  exit code: 1\n",
-      "  \n",
-      "  [23 lines of output]\n",
-      "  <string>:17: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n",
-      "  Partial import of sklearn during the build process.\n",
-      "  Traceback (most recent call last):\n",
-      "    File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\pip\\_vendor\\pyproject_hooks\\_in_process\\_in_process.py\", line 353, in <module>\n",
-      "      main()\n",
-      "    File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\pip\\_vendor\\pyproject_hooks\\_in_process\\_in_process.py\", line 335, in main\n",
-      "      json_out['return_val'] = hook(**hook_input['kwargs'])\n",
-      "                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
-      "    File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\pip\\_vendor\\pyproject_hooks\\_in_process\\_in_process.py\", line 251, in build_wheel\n",
-      "      return _build_backend().build_wheel(wheel_directory, config_settings,\n",
-      "             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
-      "    File \"C:\\Users\\HP\\AppData\\Local\\Temp\\pip-build-env-0bkde28j\\overlay\\Lib\\site-packages\\setuptools\\build_meta.py\", line 415, in build_wheel\n",
-      "      return self._build_with_temp_dir(\n",
-      "             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
-      "    File \"C:\\Users\\HP\\AppData\\Local\\Temp\\pip-build-env-0bkde28j\\overlay\\Lib\\site-packages\\setuptools\\build_meta.py\", line 397, in _build_with_temp_dir\n",
-      "      self.run_setup()\n",
-      "    File \"C:\\Users\\HP\\AppData\\Local\\Temp\\pip-build-env-0bkde28j\\overlay\\Lib\\site-packages\\setuptools\\build_meta.py\", line 497, in run_setup\n",
-      "      super().run_setup(setup_script=setup_script)\n",
-      "    File \"C:\\Users\\HP\\AppData\\Local\\Temp\\pip-build-env-0bkde28j\\overlay\\Lib\\site-packages\\setuptools\\build_meta.py\", line 313, in run_setup\n",
-      "      exec(code, locals())\n",
-      "    File \"<string>\", line 306, in <module>\n",
-      "    File \"<string>\", line 298, in setup_package\n",
-      "  ModuleNotFoundError: No module named 'numpy.distutils'\n",
-      "  [end of output]\n",
-      "  \n",
-      "  note: This error originates from a subprocess, and is likely not a problem with pip.\n",
-      "  ERROR: Failed building wheel for scikit-learn\n",
-      "ERROR: ERROR: Failed to build installable wheels for some pyproject.toml based projects (scikit-learn)\n",
-      "\n",
-      "[notice] A new release of pip is available: 24.1 -> 24.1.2\n",
-      "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
-     ]
-    }
-   ],
-   "source": [
-    "pip install pyitlib"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 14,
-   "id": "b4454361-379b-4a67-bec9-21d4a653ad27",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 640x480 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 640x480 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "#step3 Statistical Analysis and Visualization\n",
-    "import matplotlib.pyplot as plt\n",
-    "import seaborn as sns\n",
-    "\n",
-    "# Plot seasonal trends\n",
-    "sns.countplot(x='Season', data=df)\n",
-    "plt.title('Seasonal Trends')\n",
-    "plt.show()\n",
-    "\n",
-    "# Plot emerging styles\n",
-    "sns.countplot(x='Trend Subtype', data=df)\n",
-    "plt.title('Emerging Styles')\n",
-    "plt.xticks(rotation=90)  # Rotate x-axis labels by 45 degrees\n",
-    "plt.show()\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 21,
-   "id": "e2dcab65-c5c4-4d3f-b994-fbb07bda2e00",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Cramer's V for Color Palette and Fabric Type: 2.2271094753170764\n",
-      "Cramer's V for Color Palette and Garment Type: 1.1463725949663255\n",
-      "Cramer's V for Fabric Type and Color Palette: 2.2271094753170764\n",
-      "Cramer's V for Fabric Type and Garment Type: 1.8897090538949262\n",
-      "Cramer's V for Garment Type and Color Palette: 1.1463725949663253\n",
-      "Cramer's V for Garment Type and Fabric Type: 1.889709053894926\n"
-     ]
-    }
-   ],
-   "source": [
-    "import numpy as np\n",
-    "from scipy.stats import chi2_contingency\n",
-    "\n",
-    "# Calculate Cramer's V for each pair of categorical features\n",
-    "for col1 in features_df.columns:\n",
-    "    for col2 in features_df.columns:\n",
-    "        if col1 != col2:\n",
-    "            contingency_table = pd.crosstab(features_df[col1], features_df[col2])\n",
-    "            chi2, p, dof, expected = chi2_contingency(contingency_table)\n",
-    "            n = contingency_table.sum().sum()\n",
-    "            v = np.sqrt(chi2 / (n * min(dof, 1)))\n",
-    "            print(f\"Cramer's V for {col1} and {col2}: {v}\")"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 25,
-   "id": "3405c7e2-7710-4d68-9582-458815b2f3c5",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 640x480 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 1000x1000 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 1000x1000 with 4 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "#Step 4: Clustering, Dimensionality Reduction, and Time Series Analysis\n",
-    "from sklearn.cluster import KMeans\n",
-    "from sklearn.decomposition import PCA\n",
-    "from sklearn.preprocessing import LabelEncoder\n",
-    "from statsmodels.tsa.seasonal import seasonal_decompose\n",
-    "import matplotlib.pyplot as plt\n",
-    "import seaborn as sns\n",
-    "\n",
-    "# Convert categorical variables to numerical variables\n",
-    "le = LabelEncoder()\n",
-    "df['Trend Type'] = le.fit_transform(df['Trend Type'])\n",
-    "df['Trend Subtype'] = le.fit_transform(df['Trend Subtype'])\n",
-    "df['Season'] = le.fit_transform(df['Season'])\n",
-    "df['Fabric'] = le.fit_transform(df['Fabric'])\n",
-    "df['Color'] = le.fit_transform(df['Color'])\n",
-    "df['Pattern'] = le.fit_transform(df['Pattern'])\n",
-    "df['Style'] = le.fit_transform(df['Style'])\n",
-    "df['Gender'] = le.fit_transform(df['Gender'])\n",
-    "\n",
-    "# Select the features for clustering\n",
-    "features_df = df[['Trend Type', 'Trend Subtype', 'Season', 'Fabric', 'Color', 'Pattern', 'Style', 'Popularity Score', 'Search Volume', 'Social Media Mentions', 'Influencer Endorsements', 'Sales', 'User Rating']]\n",
-    "\n",
-    "# Perform K-Means clustering with different number of clusters\n",
-    "kmeans_3 = KMeans(n_clusters=3)\n",
-    "kmeans_3.fit(features_df)\n",
-    "labels_3 = kmeans_3.labels_\n",
-    "\n",
-    "kmeans_4 = KMeans(n_clusters=4)\n",
-    "kmeans_4.fit(features_df)\n",
-    "labels_4 = kmeans_4.labels_\n",
-    "\n",
-    "kmeans_5 = KMeans(n_clusters=5)\n",
-    "kmeans_5.fit(features_df)\n",
-    "labels_5 = kmeans_5.labels_\n",
-    "\n",
-    "# Visualize the elbow method\n",
-    "# Visualize the elbow method\n",
-    "inertia_3 = kmeans_3.inertia_\n",
-    "inertia_4 = kmeans_4.inertia_\n",
-    "inertia_5 = kmeans_5.inertia_\n",
-    "\n",
-    "plt.plot([3, 4, 5], [inertia_3, inertia_4, inertia_5])\n",
-    "plt.xlabel('Number of clusters')\n",
-    "plt.ylabel('Within-cluster sum of squares')\n",
-    "plt.show()\n",
-    "# Choose the best number of clusters based on the elbow method or silhouette score\n",
-    "\n",
-    "# Perform PCA\n",
-    "pca = PCA(n_components=2)\n",
-    "pca_features = pca.fit_transform(features_df)\n",
-    "\n",
-    "# Visualize the clusters in 2D PCA space\n",
-    "# Visualize the clusters in 2D PCA space\n",
-    "plt.figure(figsize=(10, 10))\n",
-    "sns.scatterplot(x=pca_features[:, 0], y=pca_features[:, 1], hue=labels_5)\n",
-    "plt.xlabel('PCA 1')\n",
-    "plt.ylabel('PCA 2')\n",
-    "plt.show()\n",
-    "# Perform seasonal decomposition with period=4 (for quarterly seasonality)\n",
-    "decomposition = seasonal_decompose(df['Popularity Score'], model='additive', period=4)\n",
-    "\n",
-    "# Plot the seasonal decomposition\n",
-    "fig, axs = plt.subplots(4, 1, figsize=(10, 10))\n",
-    "axs[0].plot(df['Popularity Score'])\n",
-    "axs[0].set_title('Original Time Series')\n",
-    "axs[1].plot(decomposition.trend)\n",
-    "axs[1].set_title('Trend')\n",
-    "axs[2].plot(decomposition.seasonal)\n",
-    "axs[2].set_title('Seasonality')\n",
-    "axs[3].plot(decomposition.resid)\n",
-    "axs[3].set_title('Residuals')\n",
-    "plt.tight_layout()\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 28,
-   "id": "dffb255b-a3a3-402e-92a7-0fdbe15b5757",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "                               SARIMAX Results                                \n",
-      "==============================================================================\n",
-      "Dep. Variable:       Popularity Score   No. Observations:                  134\n",
-      "Model:                 ARIMA(1, 1, 1)   Log Likelihood                -417.425\n",
-      "Date:                Sat, 13 Jul 2024   AIC                            840.850\n",
-      "Time:                        13:45:52   BIC                            849.521\n",
-      "Sample:                             0   HQIC                           844.374\n",
-      "                                - 134                                         \n",
-      "Covariance Type:                  opg                                         \n",
-      "==============================================================================\n",
-      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
-      "------------------------------------------------------------------------------\n",
-      "ar.L1         -0.2665      0.094     -2.824      0.005      -0.451      -0.082\n",
-      "ma.L1         -0.9030      0.056    -16.207      0.000      -1.012      -0.794\n",
-      "sigma2        30.6516      3.745      8.186      0.000      23.312      37.991\n",
-      "===================================================================================\n",
-      "Ljung-Box (L1) (Q):                   0.00   Jarque-Bera (JB):                 9.87\n",
-      "Prob(Q):                              0.99   Prob(JB):                         0.01\n",
-      "Heteroskedasticity (H):               0.27   Skew:                            -0.53\n",
-      "Prob(H) (two-sided):                  0.00   Kurtosis:                         3.82\n",
-      "===================================================================================\n",
-      "\n",
-      "Warnings:\n",
-      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
-     ]
-    },
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 640x480 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "                                     SARIMAX Results                                      \n",
-      "==========================================================================================\n",
-      "Dep. Variable:                   Popularity Score   No. Observations:                  134\n",
-      "Model:             SARIMAX(1, 1, 1)x(1, 1, 1, 12)   Log Likelihood                -391.543\n",
-      "Date:                            Sat, 13 Jul 2024   AIC                            793.085\n",
-      "Time:                                    13:45:56   BIC                            807.064\n",
-      "Sample:                                         0   HQIC                           798.763\n",
-      "                                            - 134                                         \n",
-      "Covariance Type:                              opg                                         \n",
-      "==============================================================================\n",
-      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
-      "------------------------------------------------------------------------------\n",
-      "ar.L1         -0.2216      0.131     -1.693      0.091      -0.478       0.035\n",
-      "ma.L1         -0.9331      0.074    -12.642      0.000      -1.078      -0.788\n",
-      "ar.S.L12       0.0178      0.131      0.135      0.893      -0.240       0.275\n",
-      "ma.S.L12      -0.9982     12.819     -0.078      0.938     -26.122      24.126\n",
-      "sigma2        29.1319    370.318      0.079      0.937    -696.679     754.943\n",
-      "===================================================================================\n",
-      "Ljung-Box (L1) (Q):                   0.10   Jarque-Bera (JB):                31.67\n",
-      "Prob(Q):                              0.76   Prob(JB):                         0.00\n",
-      "Heteroskedasticity (H):               0.32   Skew:                             0.48\n",
-      "Prob(H) (two-sided):                  0.00   Kurtosis:                         5.32\n",
-      "===================================================================================\n",
-      "\n",
-      "Warnings:\n",
-      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
-     ]
-    },
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 640x480 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "#Step 5: Time Series Forecasting\n",
-    "from statsmodels.tsa.arima.model import ARIMA\n",
-    "from statsmodels.tsa.statespace.sarimax import SARIMAX\n",
-    "import matplotlib.pyplot as plt\n",
-    "\n",
-    "# Fit ARIMA model\n",
-    "arima_model = ARIMA(df['Popularity Score'], order=(1,1,1))\n",
-    "arima_model_fit = arima_model.fit()\n",
-    "\n",
-    "# Print out the summary of the ARIMA model\n",
-    "print(arima_model_fit.summary())\n",
-    "\n",
-    "# Plot the residuals of the ARIMA model\n",
-    "residuals = arima_model_fit.resid\n",
-    "residuals.plot()\n",
-    "plt.show()\n",
-    "\n",
-    "# Fit SARIMA model\n",
-    "sarima_model = SARIMAX(df['Popularity Score'], order=(1,1,1), seasonal_order=(1,1,1,12))\n",
-    "sarima_model_fit = sarima_model.fit()\n",
-    "\n",
-    "# Print out the summary of the SARIMA model\n",
-    "print(sarima_model_fit.summary())\n",
-    "\n",
-    "# Plot the residuals of the SARIMA model\n",
-    "residuals = sarima_model_fit.resid\n",
-    "residuals.plot()\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 40,
-   "id": "2e220786-d345-4928-8fcd-b34d1b38dc0c",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "ARIMA Forecast:\n",
-      "134    89.382666\n",
-      "135    89.547192\n",
-      "136    89.503344\n",
-      "137    89.515030\n",
-      "138    89.511916\n",
-      "139    89.512746\n",
-      "140    89.512525\n",
-      "141    89.512583\n",
-      "142    89.512568\n",
-      "143    89.512572\n",
-      "144    89.512571\n",
-      "145    89.512571\n",
-      "146    89.512571\n",
-      "147    89.512571\n",
-      "148    89.512571\n",
-      "149    89.512571\n",
-      "150    89.512571\n",
-      "151    89.512571\n",
-      "152    89.512571\n",
-      "153    89.512571\n",
-      "154    89.512571\n",
-      "155    89.512571\n",
-      "156    89.512571\n",
-      "157    89.512571\n",
-      "158    89.512571\n",
-      "159    89.512571\n",
-      "160    89.512571\n",
-      "161    89.512571\n",
-      "162    89.512571\n",
-      "163    89.512571\n",
-      "Name: predicted_mean, dtype: float64\n"
-     ]
-    },
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 640x480 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Forecast the next 30 days using the ARIMA model\n",
-    "# Forecast the next 30 days using the ARIMA model\n",
-    "arima_forecast = arima_model_fit.forecast(steps=30)\n",
-    "\n",
-    "# Print the forecasted value\n",
-    "print(\"ARIMA Forecast:\")\n",
-    "print(arima_forecast)\n",
-    "\n",
-    "# Create a range of dates for the forecast\n",
-    "forecast_dates = pd.date_range(start='2022-01-01', periods=30, freq='D')\n",
-    "\n",
-    "# Create a pandas Series from the forecasted value and dates\n",
-    "forecast_series = pd.Series([arima_forecast.values[0]] * 30, index=forecast_dates)\n",
-    "\n",
-    "# Plot the forecasted value\n",
-    "plt.plot(forecast_series)\n",
-    "plt.title(\"ARIMA Forecast\")\n",
-    "plt.xticks(rotation=90)  \n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 41,
-   "id": "113fa6ca-6c36-4e80-b8c5-3c3fcfb1450b",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "#Step 6: Generative Models\n",
-    "from tensorflow.keras.layers import Input, Dense, Reshape, Flatten\n",
-    "from tensorflow.keras.layers import BatchNormalization, LeakyReLU\n",
-    "from tensorflow.keras.models import Model\n",
-    "\n",
-    "# Define a simple GAN architecture\n",
-    "generator_input = Input(shape=(100,))\n",
-    "x = Dense(128, activation='relu')(generator_input)\n",
-    "x = BatchNormalization()(x)\n",
-    "x = LeakyReLU()(x)\n",
-    "x = Dense(128, activation='relu')(x)\n",
-    "x = BatchNormalization()(x)\n",
-    "x = LeakyReLU()(x)\n",
-    "generator_output = Dense(784, activation='tanh')(x)\n",
-    "\n",
-    "generator = Model(generator_input, generator_output)\n",
-    "\n",
-    "discriminator_input = Input(shape=(784,))\n",
-    "x = Dense(128, activation='relu')(discriminator_input)\n",
-    "x = BatchNormalization()(x)\n",
-    "x = LeakyReLU()(x)\n",
-    "x = Dense(128, activation='relu')(x)\n",
-    "x = BatchNormalization()(x)\n",
-    "x = LeakyReLU()(x)\n",
-    "discriminator_output = Dense(1, activation='sigmoid')(x)\n",
-    "\n",
-    "discriminator = Model(discriminator_input, discriminator_output)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 45,
-   "id": "2509adf6-a257-4149-92c0-0d2ec4e96b3c",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "import os\n",
-    "from PIL import Image\n",
-    "import numpy as np\n",
-    "\n",
-    "# Create a list to store the images\n",
-    "images = []\n",
-    "\n",
-    "# Loop over the rows in the dataframe\n",
-    "for index, row in df.iterrows():\n",
-    "    # Get the image URL\n",
-    "    image_url = os.path.basename(row['Image URL'])\n",
-    "\n",
-    "    # Get the full path to the image\n",
-    "    image_path = os.path.join(os.getcwd(), 'Images', image_url)\n",
-    "\n",
-    "    # Check if the image exists\n",
-    "    if os.path.exists(image_path):\n",
-    "        # Open the image\n",
-    "        image = Image.open(image_path)\n",
-    "\n",
-    "        # Resize the image to a fixed size (e.g. 28x28)\n",
-    "        image = image.resize((28, 28))\n",
-    "\n",
-    "        # Convert the image to a numpy array\n",
-    "        image_array = np.array(image)\n",
-    "\n",
-    "        # Normalize the image array to the range [-1, 1]\n",
-    "        image_array = image_array / 127.5 - 1\n",
-    "\n",
-    "        # Add the image array to the list\n",
-    "        images.append(image_array)\n",
-    "    else:\n",
-    "        print(f\"Image not found: {image_path}\")\n",
-    "        # You can also add a default image or a random image from the dataset here\n",
-    "        # images.append(default_image)\n",
-    "\n",
-    "# Convert the list of images to a numpy array\n",
-    "real_images = np.array(images)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 46,
-   "id": "97a9e19b-4cae-4b47-99af-471c52503951",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "[[[[-0.22352941 -0.31764706 -0.29411765]\n",
-      "   [-0.21568627 -0.29411765 -0.27843137]\n",
-      "   [-0.24705882 -0.28627451 -0.28627451]\n",
-      "   ...\n",
-      "   [-0.74901961 -0.70980392 -0.64705882]\n",
-      "   [-0.49019608 -0.41960784 -0.34901961]\n",
-      "   [-0.41176471 -0.3254902  -0.27058824]]\n",
-      "\n",
-      "  [[-0.41960784 -0.49019608 -0.45882353]\n",
-      "   [-0.57647059 -0.62352941 -0.59215686]\n",
-      "   [-0.74901961 -0.74117647 -0.71764706]\n",
-      "   ...\n",
-      "   [-0.70980392 -0.67843137 -0.62352941]\n",
-      "   [-0.56078431 -0.50588235 -0.45098039]\n",
-      "   [-0.52156863 -0.49803922 -0.45098039]]\n",
-      "\n",
-      "  [[-0.69411765 -0.78039216 -0.82745098]\n",
-      "   [-0.81176471 -0.86666667 -0.90588235]\n",
-      "   [-0.90588235 -0.89019608 -0.90588235]\n",
-      "   ...\n",
-      "   [-0.78823529 -0.79607843 -0.76470588]\n",
-      "   [-0.76470588 -0.78823529 -0.81176471]\n",
-      "   [-0.80392157 -0.81960784 -0.84313725]]\n",
-      "\n",
-      "  ...\n",
-      "\n",
-      "  [[ 0.18431373  0.3254902   0.51372549]\n",
-      "   [ 0.16078431  0.30196078  0.49019608]\n",
-      "   [ 0.14509804  0.29411765  0.48235294]\n",
-      "   ...\n",
-      "   [ 0.08235294  0.18431373  0.31764706]\n",
-      "   [ 0.06666667  0.17647059  0.30196078]\n",
-      "   [ 0.0745098   0.16862745  0.28627451]]\n",
-      "\n",
-      "  [[ 0.24705882  0.38823529  0.54509804]\n",
-      "   [ 0.23921569  0.38039216  0.54509804]\n",
-      "   [ 0.22352941  0.36470588  0.52941176]\n",
-      "   ...\n",
-      "   [ 0.1372549   0.2627451   0.38823529]\n",
-      "   [ 0.1372549   0.2627451   0.38823529]\n",
-      "   [ 0.1372549   0.25490196  0.38039216]]\n",
-      "\n",
-      "  [[ 0.29411765  0.43529412  0.56862745]\n",
-      "   [ 0.3254902   0.4745098   0.59215686]\n",
-      "   [ 0.33333333  0.46666667  0.59215686]\n",
-      "   ...\n",
-      "   [ 0.18431373  0.31764706  0.44313725]\n",
-      "   [ 0.17647059  0.30196078  0.42745098]\n",
-      "   [ 0.16078431  0.28627451  0.41176471]]]\n",
-      "\n",
-      "\n",
-      " [[[ 0.35686275 -0.08235294 -0.36470588]\n",
-      "   [ 0.20784314 -0.0745098  -0.39607843]\n",
-      "   [ 0.23921569 -0.14509804 -0.38823529]\n",
-      "   ...\n",
-      "   [ 0.04313725 -0.18431373 -0.3254902 ]\n",
-      "   [ 0.06666667 -0.06666667 -0.28627451]\n",
-      "   [ 0.16862745  0.10588235 -0.22352941]]\n",
-      "\n",
-      "  [[ 0.01176471  0.01176471 -0.49803922]\n",
-      "   [ 0.01960784 -0.01960784 -0.41960784]\n",
-      "   [-0.05098039 -0.00392157 -0.41176471]\n",
-      "   ...\n",
-      "   [ 0.09019608  0.05882353  0.02745098]\n",
-      "   [ 0.58431373  0.57647059  0.50588235]\n",
-      "   [ 0.55294118  0.56862745  0.38039216]]\n",
-      "\n",
-      "  [[-0.16078431 -0.0745098  -0.4745098 ]\n",
-      "   [-0.3254902  -0.22352941 -0.51372549]\n",
-      "   [-0.42745098 -0.31764706 -0.56078431]\n",
-      "   ...\n",
-      "   [-0.34901961 -0.38823529 -0.41176471]\n",
-      "   [ 0.14509804  0.09019608 -0.00392157]\n",
-      "   [ 0.12941176  0.10588235 -0.09019608]]\n",
-      "\n",
-      "  ...\n",
-      "\n",
-      "  [[ 0.36470588  0.45882353  0.49019608]\n",
-      "   [ 0.34117647  0.44313725  0.45098039]\n",
-      "   [ 0.37254902  0.4745098   0.4745098 ]\n",
-      "   ...\n",
-      "   [-0.28627451 -0.48235294 -0.62352941]\n",
-      "   [-0.12156863 -0.14509804 -0.2       ]\n",
-      "   [-0.19215686 -0.18431373 -0.2       ]]\n",
-      "\n",
-      "  [[ 0.37254902  0.4745098   0.52156863]\n",
-      "   [ 0.38823529  0.49019608  0.5372549 ]\n",
-      "   [ 0.41176471  0.50588235  0.55294118]\n",
-      "   ...\n",
-      "   [-0.39607843 -0.46666667 -0.5372549 ]\n",
-      "   [-0.12941176 -0.23921569 -0.37254902]\n",
-      "   [-0.01176471 -0.12941176 -0.25490196]]\n",
-      "\n",
-      "  [[ 0.37254902  0.46666667  0.51372549]\n",
-      "   [ 0.38823529  0.48235294  0.52941176]\n",
-      "   [ 0.38039216  0.46666667  0.51372549]\n",
-      "   ...\n",
-      "   [-0.69411765 -0.68627451 -0.68627451]\n",
-      "   [-0.5372549  -0.52156863 -0.55294118]\n",
-      "   [-0.38823529 -0.43529412 -0.51372549]]]\n",
-      "\n",
-      "\n",
-      " [[[ 0.52156863  0.56862745  0.49019608]\n",
-      "   [ 0.29411765  0.33333333  0.23921569]\n",
-      "   [ 0.45098039  0.39607843  0.15294118]\n",
-      "   ...\n",
-      "   [ 0.85098039  0.85098039  0.78823529]\n",
-      "   [ 0.85882353  0.85882353  0.78823529]\n",
-      "   [ 0.84313725  0.84313725  0.76470588]]\n",
-      "\n",
-      "  [[ 0.95294118  0.95294118  0.91372549]\n",
-      "   [ 0.61568627  0.63921569  0.57647059]\n",
-      "   [ 0.30980392  0.37254902  0.28627451]\n",
-      "   ...\n",
-      "   [ 0.8745098   0.8745098   0.81176471]\n",
-      "   [ 0.86666667  0.86666667  0.80392157]\n",
-      "   [ 0.86666667  0.86666667  0.79607843]]\n",
-      "\n",
-      "  [[ 0.9372549   0.92941176  0.89803922]\n",
-      "   [ 0.97647059  0.96078431  0.9372549 ]\n",
-      "   [ 0.69411765  0.7254902   0.67843137]\n",
-      "   ...\n",
-      "   [ 0.88235294  0.88235294  0.81960784]\n",
-      "   [ 0.88235294  0.88235294  0.81960784]\n",
-      "   [ 0.8745098   0.8745098   0.81176471]]\n",
-      "\n",
-      "  ...\n",
-      "\n",
-      "  [[ 0.50588235  0.52156863  0.49019608]\n",
-      "   [ 0.49019608  0.51372549  0.4745098 ]\n",
-      "   [ 0.45882353  0.45882353  0.33333333]\n",
-      "   ...\n",
-      "   [ 0.89019608  0.92156863  0.92941176]\n",
-      "   [ 0.89019608  0.92156863  0.92941176]\n",
-      "   [ 0.89019608  0.92156863  0.92941176]]\n",
-      "\n",
-      "  [[ 0.46666667  0.49803922  0.49019608]\n",
-      "   [ 0.45882353  0.49019608  0.48235294]\n",
-      "   [ 0.45098039  0.49803922  0.4745098 ]\n",
-      "   ...\n",
-      "   [ 0.68627451  0.7254902   0.70196078]\n",
-      "   [ 0.6627451   0.70196078  0.67843137]\n",
-      "   [ 0.68627451  0.7254902   0.70196078]]\n",
-      "\n",
-      "  [[ 0.45098039  0.48235294  0.46666667]\n",
-      "   [ 0.45098039  0.49019608  0.4745098 ]\n",
-      "   [ 0.50588235  0.52941176  0.51372549]\n",
-      "   ...\n",
-      "   [ 0.63137255  0.6627451   0.63137255]\n",
-      "   [ 0.63921569  0.67058824  0.63921569]\n",
-      "   [ 0.63137255  0.6627451   0.62352941]]]\n",
-      "\n",
-      "\n",
-      " ...\n",
-      "\n",
-      "\n",
-      " [[[ 0.78039216  0.74901961  0.67843137]\n",
-      "   [ 0.76470588  0.73333333  0.6627451 ]\n",
-      "   [ 0.76470588  0.73333333  0.6627451 ]\n",
-      "   ...\n",
-      "   [ 0.73333333  0.67058824  0.58431373]\n",
-      "   [ 0.73333333  0.67058824  0.58431373]\n",
-      "   [ 0.73333333  0.67058824  0.58431373]]\n",
-      "\n",
-      "  [[ 0.78823529  0.75686275  0.69411765]\n",
-      "   [ 0.77254902  0.74117647  0.67843137]\n",
-      "   [ 0.76470588  0.73333333  0.6627451 ]\n",
-      "   ...\n",
-      "   [ 0.77254902  0.7254902   0.63137255]\n",
-      "   [ 0.78039216  0.71764706  0.63137255]\n",
-      "   [ 0.78039216  0.71764706  0.63137255]]\n",
-      "\n",
-      "  [[ 0.78823529  0.74901961  0.70196078]\n",
-      "   [ 0.78039216  0.74117647  0.69411765]\n",
-      "   [ 0.77254902  0.73333333  0.67058824]\n",
-      "   ...\n",
-      "   [ 0.78039216  0.73333333  0.63921569]\n",
-      "   [ 0.78823529  0.74117647  0.64705882]\n",
-      "   [ 0.78823529  0.74117647  0.64705882]]\n",
-      "\n",
-      "  ...\n",
-      "\n",
-      "  [[ 0.43529412  0.2627451   0.09803922]\n",
-      "   [ 0.34901961  0.18431373  0.00392157]\n",
-      "   [ 0.74117647  0.64705882  0.51372549]\n",
-      "   ...\n",
-      "   [ 0.80392157  0.68627451  0.4745098 ]\n",
-      "   [ 0.84313725  0.7254902   0.52941176]\n",
-      "   [ 0.78039216  0.63921569  0.45098039]]\n",
-      "\n",
-      "  [[ 0.18431373 -0.05098039 -0.25490196]\n",
-      "   [ 0.01176471 -0.28627451 -0.56078431]\n",
-      "   [ 0.73333333  0.59215686  0.45882353]\n",
-      "   ...\n",
-      "   [ 0.81960784  0.70196078  0.51372549]\n",
-      "   [ 0.85098039  0.73333333  0.56078431]\n",
-      "   [ 0.78039216  0.63137255  0.43529412]]\n",
-      "\n",
-      "  [[ 0.15294118 -0.24705882 -0.57647059]\n",
-      "   [ 0.23921569 -0.18431373 -0.52156863]\n",
-      "   [ 0.45882353  0.16862745 -0.06666667]\n",
-      "   ...\n",
-      "   [ 0.81176471  0.69411765  0.49803922]\n",
-      "   [ 0.85098039  0.73333333  0.55294118]\n",
-      "   [ 0.75686275  0.60784314  0.42745098]]]\n",
-      "\n",
-      "\n",
-      " [[[ 0.52156863  0.52941176  0.54509804]\n",
-      "   [ 0.46666667  0.4745098   0.49019608]\n",
-      "   [ 0.41176471  0.41960784  0.41176471]\n",
-      "   ...\n",
-      "   [ 0.28627451  0.2         0.17647059]\n",
-      "   [ 0.27843137  0.21568627  0.2       ]\n",
-      "   [ 0.24705882  0.18431373  0.16078431]]\n",
-      "\n",
-      "  [[ 0.33333333  0.31764706  0.29411765]\n",
-      "   [ 0.34117647  0.33333333  0.30980392]\n",
-      "   [ 0.34901961  0.33333333  0.31764706]\n",
-      "   ...\n",
-      "   [-0.11372549 -0.31764706 -0.44313725]\n",
-      "   [-0.0745098  -0.16862745 -0.20784314]\n",
-      "   [ 0.05882353 -0.02745098 -0.0745098 ]]\n",
-      "\n",
-      "  [[ 0.35686275  0.31764706  0.29411765]\n",
-      "   [ 0.36470588  0.33333333  0.30980392]\n",
-      "   [ 0.38039216  0.34117647  0.31764706]\n",
-      "   ...\n",
-      "   [-0.23137255 -0.45098039 -0.61568627]\n",
-      "   [-0.3254902  -0.40392157 -0.46666667]\n",
-      "   [ 0.09019608 -0.01176471 -0.05882353]]\n",
-      "\n",
-      "  ...\n",
-      "\n",
-      "  [[ 0.25490196  0.2627451   0.27058824]\n",
-      "   [ 0.34117647  0.34901961  0.35686275]\n",
-      "   [ 0.41960784  0.42745098  0.41960784]\n",
-      "   ...\n",
-      "   [ 0.67058824  0.63921569  0.63921569]\n",
-      "   [ 0.59215686  0.57647059  0.57647059]\n",
-      "   [ 0.52941176  0.52156863  0.52156863]]\n",
-      "\n",
-      "  [[-0.08235294 -0.03529412  0.00392157]\n",
-      "   [-0.08235294 -0.04313725  0.00392157]\n",
-      "   [-0.09019608 -0.05098039 -0.01176471]\n",
-      "   ...\n",
-      "   [ 0.90588235  0.86666667  0.84313725]\n",
-      "   [ 0.92156863  0.8745098   0.83529412]\n",
-      "   [ 0.92941176  0.88235294  0.84313725]]\n",
-      "\n",
-      "  [[ 0.00392157  0.02745098  0.05882353]\n",
-      "   [-0.02745098 -0.00392157  0.03529412]\n",
-      "   [-0.05882353 -0.03529412  0.01176471]\n",
-      "   ...\n",
-      "   [ 0.88235294  0.84313725  0.81960784]\n",
-      "   [ 0.88235294  0.84313725  0.81960784]\n",
-      "   [ 0.88235294  0.83529412  0.81960784]]]\n",
-      "\n",
-      "\n",
-      " [[[ 0.3254902   0.34901961  0.38823529]\n",
-      "   [ 0.33333333  0.35686275  0.39607843]\n",
-      "   [ 0.34117647  0.36470588  0.40392157]\n",
-      "   ...\n",
-      "   [ 0.3254902   0.34901961  0.38823529]\n",
-      "   [ 0.33333333  0.35686275  0.39607843]\n",
-      "   [ 0.34117647  0.36470588  0.40392157]]\n",
-      "\n",
-      "  [[ 0.34117647  0.36470588  0.41176471]\n",
-      "   [ 0.34117647  0.36470588  0.41176471]\n",
-      "   [ 0.34901961  0.37254902  0.41960784]\n",
-      "   ...\n",
-      "   [ 0.34117647  0.36470588  0.40392157]\n",
-      "   [ 0.34117647  0.36470588  0.40392157]\n",
-      "   [ 0.34117647  0.36470588  0.40392157]]\n",
-      "\n",
-      "  [[ 0.34901961  0.37254902  0.42745098]\n",
-      "   [ 0.35686275  0.38039216  0.43529412]\n",
-      "   [ 0.36470588  0.38823529  0.43529412]\n",
-      "   ...\n",
-      "   [ 0.34901961  0.37254902  0.41176471]\n",
-      "   [ 0.34901961  0.37254902  0.41176471]\n",
-      "   [ 0.34901961  0.37254902  0.41960784]]\n",
-      "\n",
-      "  ...\n",
-      "\n",
-      "  [[ 0.41176471  0.43529412  0.49803922]\n",
-      "   [ 0.41960784  0.44313725  0.49803922]\n",
-      "   [ 0.41960784  0.44313725  0.49803922]\n",
-      "   ...\n",
-      "   [ 0.41960784  0.44313725  0.48235294]\n",
-      "   [ 0.41960784  0.44313725  0.48235294]\n",
-      "   [ 0.41176471  0.43529412  0.49019608]]\n",
-      "\n",
-      "  [[ 0.43529412  0.45882353  0.50588235]\n",
-      "   [ 0.43529412  0.45882353  0.50588235]\n",
-      "   [ 0.44313725  0.46666667  0.52156863]\n",
-      "   ...\n",
-      "   [ 0.44313725  0.46666667  0.50588235]\n",
-      "   [ 0.44313725  0.46666667  0.50588235]\n",
-      "   [ 0.43529412  0.45882353  0.51372549]]\n",
-      "\n",
-      "  [[ 0.44313725  0.46666667  0.50588235]\n",
-      "   [ 0.44313725  0.46666667  0.50588235]\n",
-      "   [ 0.45098039  0.4745098   0.52156863]\n",
-      "   ...\n",
-      "   [ 0.45098039  0.4745098   0.51372549]\n",
-      "   [ 0.45098039  0.4745098   0.51372549]\n",
-      "   [ 0.45098039  0.4745098   0.52156863]]]]\n"
-     ]
-    }
-   ],
-   "source": [
-    "print(real_images)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 48,
-   "id": "ed223342-91e5-4b4b-8b01-d1bb193f8786",
-   "metadata": {},
-   "outputs": [
-    {
-     "ename": "ValueError",
-     "evalue": "Input 0 of layer \"functional_3\" is incompatible with the layer: expected shape=(None, 784), found shape=(134, 28, 28, 3)",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
-      "Cell \u001b[1;32mIn[48], line 18\u001b[0m\n\u001b[0;32m     16\u001b[0m discriminator\u001b[38;5;241m.\u001b[39mtrainable \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[0;32m     17\u001b[0m batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m16\u001b[39m\n\u001b[1;32m---> 18\u001b[0m d_loss_real \u001b[38;5;241m=\u001b[39m \u001b[43mdiscriminator\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtrain_on_batch\u001b[49m\u001b[43m(\u001b[49m\u001b[43mreal_images\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mones\u001b[49m\u001b[43m(\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     19\u001b[0m d_loss_fake \u001b[38;5;241m=\u001b[39m discriminator\u001b[38;5;241m.\u001b[39mtrain_on_batch(generator\u001b[38;5;241m.\u001b[39mpredict(noise), np\u001b[38;5;241m.\u001b[39mzeros((batch_size, \u001b[38;5;241m1\u001b[39m)))\n\u001b[0;32m     20\u001b[0m d_loss \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0.5\u001b[39m \u001b[38;5;241m*\u001b[39m np\u001b[38;5;241m.\u001b[39madd(d_loss_real, d_loss_fake)\n",
-      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\backend\\tensorflow\\trainer.py:551\u001b[0m, in \u001b[0;36mTensorFlowTrainer.train_on_batch\u001b[1;34m(self, x, y, sample_weight, class_weight, return_dict)\u001b[0m\n\u001b[0;32m    548\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdata\u001b[39m():\n\u001b[0;32m    549\u001b[0m     \u001b[38;5;28;01myield\u001b[39;00m (x, y, sample_weight)\n\u001b[1;32m--> 551\u001b[0m logs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtrain_function\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    552\u001b[0m logs \u001b[38;5;241m=\u001b[39m tree\u001b[38;5;241m.\u001b[39mmap_structure(\u001b[38;5;28;01mlambda\u001b[39;00m x: np\u001b[38;5;241m.\u001b[39marray(x), logs)\n\u001b[0;32m    553\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m return_dict:\n",
-      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\tensorflow\\python\\util\\traceback_utils.py:153\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    151\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m    152\u001b[0m   filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n\u001b[1;32m--> 153\u001b[0m   \u001b[38;5;28;01mraise\u001b[39;00m e\u001b[38;5;241m.\u001b[39mwith_traceback(filtered_tb) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m    154\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[0;32m    155\u001b[0m   \u001b[38;5;28;01mdel\u001b[39;00m filtered_tb\n",
-      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\backend\\tensorflow\\trainer.py:118\u001b[0m, in \u001b[0;36mTensorFlowTrainer.make_train_function.<locals>.one_step_on_iterator\u001b[1;34m(iterator)\u001b[0m\n\u001b[0;32m    116\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Runs a single training step given a Dataset iterator.\"\"\"\u001b[39;00m\n\u001b[0;32m    117\u001b[0m data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mnext\u001b[39m(iterator)\n\u001b[1;32m--> 118\u001b[0m outputs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdistribute_strategy\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrun\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    119\u001b[0m \u001b[43m    \u001b[49m\u001b[43mone_step_on_data\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43margs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    120\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    121\u001b[0m outputs \u001b[38;5;241m=\u001b[39m reduce_per_replica(\n\u001b[0;32m    122\u001b[0m     outputs,\n\u001b[0;32m    123\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdistribute_strategy,\n\u001b[0;32m    124\u001b[0m     reduction\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdistribute_reduction_method,\n\u001b[0;32m    125\u001b[0m )\n\u001b[0;32m    126\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m outputs\n",
-      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\backend\\tensorflow\\trainer.py:106\u001b[0m, in \u001b[0;36mTensorFlowTrainer.make_train_function.<locals>.one_step_on_data\u001b[1;34m(data)\u001b[0m\n\u001b[0;32m    103\u001b[0m \u001b[38;5;129m@tf\u001b[39m\u001b[38;5;241m.\u001b[39mautograph\u001b[38;5;241m.\u001b[39mexperimental\u001b[38;5;241m.\u001b[39mdo_not_convert\n\u001b[0;32m    104\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mone_step_on_data\u001b[39m(data):\n\u001b[0;32m    105\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Runs a single training step on a batch of data.\"\"\"\u001b[39;00m\n\u001b[1;32m--> 106\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtrain_step\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n",
-      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\backend\\tensorflow\\trainer.py:57\u001b[0m, in \u001b[0;36mTensorFlowTrainer.train_step\u001b[1;34m(self, data)\u001b[0m\n\u001b[0;32m     55\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m tf\u001b[38;5;241m.\u001b[39mGradientTape() \u001b[38;5;28;01mas\u001b[39;00m tape:\n\u001b[0;32m     56\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_has_training_arg:\n\u001b[1;32m---> 57\u001b[0m         y_pred \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtraining\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[0;32m     58\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m     59\u001b[0m         y_pred \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m(x)\n",
-      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\utils\\traceback_utils.py:122\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    119\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n\u001b[0;32m    120\u001b[0m     \u001b[38;5;66;03m# To get the full stack trace, call:\u001b[39;00m\n\u001b[0;32m    121\u001b[0m     \u001b[38;5;66;03m# `keras.config.disable_traceback_filtering()`\u001b[39;00m\n\u001b[1;32m--> 122\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m e\u001b[38;5;241m.\u001b[39mwith_traceback(filtered_tb) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m    123\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[0;32m    124\u001b[0m     \u001b[38;5;28;01mdel\u001b[39;00m filtered_tb\n",
-      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\layers\\input_spec.py:245\u001b[0m, in \u001b[0;36massert_input_compatibility\u001b[1;34m(input_spec, inputs, layer_name)\u001b[0m\n\u001b[0;32m    243\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m spec_dim \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m dim \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m    244\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m spec_dim \u001b[38;5;241m!=\u001b[39m dim:\n\u001b[1;32m--> 245\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    246\u001b[0m             \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mInput \u001b[39m\u001b[38;5;132;01m{\u001b[39;00minput_index\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m of layer \u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mlayer_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m is \u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[0;32m    247\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mincompatible with the layer: \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    248\u001b[0m             \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mexpected shape=\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mspec\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    249\u001b[0m             \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfound shape=\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    250\u001b[0m         )\n",
-      "\u001b[1;31mValueError\u001b[0m: Input 0 of layer \"functional_3\" is incompatible with the layer: expected shape=(None, 784), found shape=(134, 28, 28, 3)"
-     ]
-    }
-   ],
-   "source": [
-    "# Compile the generator and discriminator models\n",
-    "generator.compile(loss='binary_crossentropy', optimizer='adam')\n",
-    "discriminator.compile(loss='binary_crossentropy', optimizer='adam')\n",
-    "\n",
-    "# Define a combined model for training the generator\n",
-    "z = Input(shape=(100,))\n",
-    "generated_image = generator(z)\n",
-    "discriminator.trainable = False\n",
-    "validity = discriminator(generated_image)\n",
-    "combined = Model(z, validity)\n",
-    "combined.compile(loss='binary_crossentropy', optimizer='adam')\n",
-    "\n",
-    "# Train the GAN\n",
-    "for epoch in range(10000):\n",
-    "    # Train the discriminator\n",
-    "    discriminator.trainable = True\n",
-    "    batch_size=16\n",
-    "    d_loss_real = discriminator.train_on_batch(real_images, np.ones((batch_size, 1)))\n",
-    "    d_loss_fake = discriminator.train_on_batch(generator.predict(noise), np.zeros((batch_size, 1)))\n",
-    "    d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)\n",
-    "\n",
-    "    # Train the generator\n",
-    "    discriminator.trainable = False\n",
-    "    g_loss = combined.train_on_batch(noise, np.ones((batch_size, 1)))\n",
-    "\n",
-    "    # Print the loss at each epoch\n",
-    "    print(f'Epoch {epoch+1}, D loss: {d_loss[0]}, G loss: {g_loss}')\n",
-    "\n",
-    "# Generate and visualize samples\n",
-    "noise = np.random.normal(0, 1, (25, 100))\n",
-    "generated_images = generator.predict(noise)\n",
-    "\n",
-    "plt.figure(figsize=(5, 5))\n",
-    "for i in range(25):\n",
-    "    plt.subplot(5, 5, i+1)\n",
-    "    plt.imshow(generated_images[i].reshape(28, 28), cmap='gray')\n",
-    "    plt.axis('off')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 51,
-   "id": "f433a1ac-815d-462b-8ca0-b0017a659459",
-   "metadata": {},
-   "outputs": [
-    {
-     "ename": "TypeError",
-     "evalue": "'>=' not supported between instances of 'int' and 'str'",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
-      "Cell \u001b[1;32mIn[51], line 23\u001b[0m\n\u001b[0;32m     20\u001b[0m num_cols \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m1\u001b[39m] \u001b[38;5;241m-\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[0;32m     22\u001b[0m \u001b[38;5;66;03m# Normalize the data\u001b[39;00m\n\u001b[1;32m---> 23\u001b[0m data \u001b[38;5;241m=\u001b[39m data \u001b[38;5;241m/\u001b[39m \u001b[43mdata\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmax\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     25\u001b[0m \u001b[38;5;66;03m# Define the shape of the data\u001b[39;00m\n\u001b[0;32m     26\u001b[0m data_shape \u001b[38;5;241m=\u001b[39m (\u001b[38;5;241m1\u001b[39m, num_cols)\n",
-      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\numpy\\core\\_methods.py:41\u001b[0m, in \u001b[0;36m_amax\u001b[1;34m(a, axis, out, keepdims, initial, where)\u001b[0m\n\u001b[0;32m     39\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_amax\u001b[39m(a, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, out\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, keepdims\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[0;32m     40\u001b[0m           initial\u001b[38;5;241m=\u001b[39m_NoValue, where\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m):\n\u001b[1;32m---> 41\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mumr_maximum\u001b[49m\u001b[43m(\u001b[49m\u001b[43ma\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mout\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkeepdims\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minitial\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mwhere\u001b[49m\u001b[43m)\u001b[49m\n",
-      "\u001b[1;31mTypeError\u001b[0m: '>=' not supported between instances of 'int' and 'str'"
-     ]
-    }
-   ],
-   "source": [
-    "import pandas as pd\n",
-    "import numpy as np\n",
-    "from tensorflow.keras.models import Model, Sequential\n",
-    "from tensorflow.keras.layers import Input, Dense, Reshape, Flatten\n",
-    "from tensorflow.keras.layers import BatchNormalization\n",
-    "from tensorflow.keras.layers import LeakyReLU\n",
-    "from tensorflow.keras.layers import Conv2D, Conv2DTranspose\n",
-    "\n",
-    "\n",
-    "# Convert the dataframe to a numpy array\n",
-    "data = df.values\n",
-    "# Convert string columns to numeric\n",
-    "numeric_cols = ['Trend ID', 'Popularity Score', 'Search Volume', 'Social Media Mentions', 'Influencer Endorsements', 'Sales', 'User Rating']\n",
-    "df[numeric_cols] = df[numeric_cols].apply(pd.to_numeric, errors='coerce')\n",
-    "\n",
-    "# Convert the dataframe to a numpy array\n",
-    "data = df.values\n",
-    "\n",
-    "# Determine the number of numerical columns\n",
-    "num_cols = data.shape[1] - 1\n",
-    "\n",
-    "# Normalize the data\n",
-    "data = data / data.max()\n",
-    "\n",
-    "# Define the shape of the data\n",
-    "data_shape = (1, num_cols)\n",
-    "\n",
-    "# Determine the number of numerical columns\n",
-    "num_cols = data.shape[1] - 1\n",
-    "\n",
-    "# Normalize the data\n",
-    "data = data / data.max()\n",
-    "\n",
-    "# Define the shape of the data\n",
-    "data_shape = (1, num_cols)\n",
-    "\n",
-    "# Define the generator model\n",
-    "generator = Sequential()\n",
-    "generator.add(Dense(128, input_dim=100, activation=\"relu\"))\n",
-    "generator.add(BatchNormalization(momentum=0.8))\n",
-    "generator.add(Dense(128, activation=\"relu\"))\n",
-    "generator.add(BatchNormalization(momentum=0.8))\n",
-    "generator.add(Dense(data_shape[1], activation=\"tanh\"))\n",
-    "generator.add(Reshape(data_shape))\n",
-    "\n",
-    "# Define the discriminator model\n",
-    "discriminator = Sequential()\n",
-    "discriminator.add(Flatten(input_shape=data_shape))\n",
-    "discriminator.add(Dense(128, activation=\"relu\"))\n",
-    "discriminator.add(BatchNormalization(momentum=0.8))\n",
-    "discriminator.add(Dense(128, activation=\"relu\"))\n",
-    "discriminator.add(BatchNormalization(momentum=0.8))\n",
-    "discriminator.add(Dense(1, activation=\"sigmoid\"))\n",
-    "\n",
-    "# Define the combined generator and discriminator model, for updating the generator\n",
-    "z = Input(shape=(100,))\n",
-    "generated_data = generator(z)\n",
-    "discriminator.trainable = False\n",
-    "validity = discriminator(generated_data)\n",
-    "combined = Model(z, validity)\n",
-    "combined.compile(loss='binary_crossentropy', optimizer='adam')\n",
-    "\n",
-    "# Compile the discriminator\n",
-    "discriminator.trainable = True\n",
-    "discriminator.compile(loss='binary_crossentropy', optimizer='adam')\n",
-    "\n",
-    "# Train the GAN\n",
-    "batch_size = 32\n",
-    "for epoch in range(10000):\n",
-    "    # Train the discriminator\n",
-    "    discriminator.trainable = True\n",
-    "    idx = np.random.randint(0, data.shape[0], batch_size)\n",
-    "    real_data = data[idx]\n",
-    "    noise = np.random.normal(0, 1, (batch_size, 100))\n",
-    "    generated_data = generator.predict(noise)\n",
-    "    d_loss_real = discriminator.train_on_batch(real_data, np.ones((batch_size, 1)))\n",
-    "    d_loss_fake = discriminator.train_on_batch(generated_data, np.zeros((batch_size, 1)))\n",
-    "    d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)\n",
-    "\n",
-    "    # Train the generator\n",
-    "    discriminator.trainable = False\n",
-    "    g_loss = combined.train_on_batch(noise, np.ones((batch_size, 1)))\n",
-    "\n",
-    "    # Print the loss at each epoch\n",
-    "    print(f'Epoch {epoch+1}, D loss: {d_loss[0]}, G loss: {g_loss}')\n",
-    "\n",
-    "# Generate and visualize samples\n",
-    "noise = np.random.normal(0, 1, (25, 100))\n",
-    "generated_data = generator.predict(noise)\n",
-    "\n",
-    "# Convert the generated data back to a dataframe\n",
-    "generated_df = pd.DataFrame(generated_data)\n",
-    "\n",
-    "# Visualize the generated data\n",
-    "print(generated_df.head())"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 52,
-   "id": "7eeb8d52-8852-4b27-b7c4-f0e8e62b2a34",
-   "metadata": {},
-   "outputs": [
-    {
-     "ename": "SyntaxError",
-     "evalue": "unterminated string literal (detected at line 12) (241974481.py, line 12)",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[1;36m  Cell \u001b[1;32mIn[52], line 12\u001b[1;36m\u001b[0m\n\u001b[1;33m    item_features = pd.get_dummies(df, columns=['Color\u001b[0m\n\u001b[1;37m                                                ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m unterminated string literal (detected at line 12)\n"
-     ]
-    }
-   ],
-   "source": [
-    "#step7 personalized recommendation system\n",
-    "from sklearn.metrics.pairwise import cosine_similarity\n",
-    "from sklearn.neighbors import NearestNeighbors\n",
-    "\n",
-    "# Define a simple collaborative filtering model\n",
-    "user_item_matrix = pd.pivot_table(df, values='Popularity Score', index='User ID', columns='Trend ID')\n",
-    "\n",
-    "# Calculate similarity matrix\n",
-    "similarity_matrix = cosine_similarity(user_item_matrix)\n",
-    "\n",
-    "# Define a simple content-based filtering model\n",
-    "item_features = pd.get_dummies(df, columns=['Color"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 54,
-   "id": "a7b65490-16a2-40a2-b14e-f05752350df8",
-   "metadata": {},
-   "outputs": [
-    {
-     "ename": "ValueError",
-     "evalue": "Input contains NaN.",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
-      "Cell \u001b[1;32mIn[54], line 7\u001b[0m\n\u001b[0;32m      4\u001b[0m user_item_matrix \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mpivot_table(df, values\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mPopularity Score\u001b[39m\u001b[38;5;124m'\u001b[39m, index\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mTrend ID\u001b[39m\u001b[38;5;124m'\u001b[39m, columns\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mGender\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m      6\u001b[0m \u001b[38;5;66;03m# Calculate similarity matrix\u001b[39;00m\n\u001b[1;32m----> 7\u001b[0m similarity_matrix \u001b[38;5;241m=\u001b[39m \u001b[43mcosine_similarity\u001b[49m\u001b[43m(\u001b[49m\u001b[43muser_item_matrix\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m      9\u001b[0m \u001b[38;5;66;03m# Define a function to get recommendations for a user\u001b[39;00m\n\u001b[0;32m     10\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mget_recommendations\u001b[39m(user_id, num_recommendations):\n",
-      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\utils\\_param_validation.py:213\u001b[0m, in \u001b[0;36mvalidate_params.<locals>.decorator.<locals>.wrapper\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    207\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m    208\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m config_context(\n\u001b[0;32m    209\u001b[0m         skip_parameter_validation\u001b[38;5;241m=\u001b[39m(\n\u001b[0;32m    210\u001b[0m             prefer_skip_nested_validation \u001b[38;5;129;01mor\u001b[39;00m global_skip_validation\n\u001b[0;32m    211\u001b[0m         )\n\u001b[0;32m    212\u001b[0m     ):\n\u001b[1;32m--> 213\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    214\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m InvalidParameterError \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m    215\u001b[0m     \u001b[38;5;66;03m# When the function is just a wrapper around an estimator, we allow\u001b[39;00m\n\u001b[0;32m    216\u001b[0m     \u001b[38;5;66;03m# the function to delegate validation to the estimator, but we replace\u001b[39;00m\n\u001b[0;32m    217\u001b[0m     \u001b[38;5;66;03m# the name of the estimator by the name of the function in the error\u001b[39;00m\n\u001b[0;32m    218\u001b[0m     \u001b[38;5;66;03m# message to avoid confusion.\u001b[39;00m\n\u001b[0;32m    219\u001b[0m     msg \u001b[38;5;241m=\u001b[39m re\u001b[38;5;241m.\u001b[39msub(\n\u001b[0;32m    220\u001b[0m         \u001b[38;5;124mr\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mparameter of \u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124mw+ must be\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    221\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mparameter of \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mfunc\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__qualname__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m must be\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    222\u001b[0m         \u001b[38;5;28mstr\u001b[39m(e),\n\u001b[0;32m    223\u001b[0m     )\n",
-      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\pairwise.py:1668\u001b[0m, in \u001b[0;36mcosine_similarity\u001b[1;34m(X, Y, dense_output)\u001b[0m\n\u001b[0;32m   1624\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Compute cosine similarity between samples in X and Y.\u001b[39;00m\n\u001b[0;32m   1625\u001b[0m \n\u001b[0;32m   1626\u001b[0m \u001b[38;5;124;03mCosine similarity, or the cosine kernel, computes similarity as the\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   1664\u001b[0m \u001b[38;5;124;03m       [0.57..., 0.81...]])\u001b[39;00m\n\u001b[0;32m   1665\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m   1666\u001b[0m \u001b[38;5;66;03m# to avoid recursive import\u001b[39;00m\n\u001b[1;32m-> 1668\u001b[0m X, Y \u001b[38;5;241m=\u001b[39m \u001b[43mcheck_pairwise_arrays\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mY\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1670\u001b[0m X_normalized \u001b[38;5;241m=\u001b[39m normalize(X, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m   1671\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m X \u001b[38;5;129;01mis\u001b[39;00m Y:\n",
-      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\pairwise.py:164\u001b[0m, in \u001b[0;36mcheck_pairwise_arrays\u001b[1;34m(X, Y, precomputed, dtype, accept_sparse, force_all_finite, ensure_2d, copy)\u001b[0m\n\u001b[0;32m    161\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m dtype_float\n\u001b[0;32m    163\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m Y \u001b[38;5;129;01mis\u001b[39;00m X \u001b[38;5;129;01mor\u001b[39;00m Y \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m--> 164\u001b[0m     X \u001b[38;5;241m=\u001b[39m Y \u001b[38;5;241m=\u001b[39m \u001b[43mcheck_array\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    165\u001b[0m \u001b[43m        \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    166\u001b[0m \u001b[43m        \u001b[49m\u001b[43maccept_sparse\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maccept_sparse\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    167\u001b[0m \u001b[43m        \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    168\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    169\u001b[0m \u001b[43m        \u001b[49m\u001b[43mforce_all_finite\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mforce_all_finite\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    170\u001b[0m \u001b[43m        \u001b[49m\u001b[43mestimator\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mestimator\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    171\u001b[0m \u001b[43m        \u001b[49m\u001b[43mensure_2d\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mensure_2d\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    172\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    173\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    174\u001b[0m     X \u001b[38;5;241m=\u001b[39m check_array(\n\u001b[0;32m    175\u001b[0m         X,\n\u001b[0;32m    176\u001b[0m         accept_sparse\u001b[38;5;241m=\u001b[39maccept_sparse,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    181\u001b[0m         ensure_2d\u001b[38;5;241m=\u001b[39mensure_2d,\n\u001b[0;32m    182\u001b[0m     )\n",
-      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\utils\\validation.py:1059\u001b[0m, in \u001b[0;36mcheck_array\u001b[1;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[0;32m   1053\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m   1054\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFound array with dim \u001b[39m\u001b[38;5;132;01m%d\u001b[39;00m\u001b[38;5;124m. \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m expected <= 2.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1055\u001b[0m         \u001b[38;5;241m%\u001b[39m (array\u001b[38;5;241m.\u001b[39mndim, estimator_name)\n\u001b[0;32m   1056\u001b[0m     )\n\u001b[0;32m   1058\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m force_all_finite:\n\u001b[1;32m-> 1059\u001b[0m     \u001b[43m_assert_all_finite\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m   1060\u001b[0m \u001b[43m        \u001b[49m\u001b[43marray\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1061\u001b[0m \u001b[43m        \u001b[49m\u001b[43minput_name\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minput_name\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1062\u001b[0m \u001b[43m        \u001b[49m\u001b[43mestimator_name\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mestimator_name\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1063\u001b[0m \u001b[43m        \u001b[49m\u001b[43mallow_nan\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mforce_all_finite\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m==\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mallow-nan\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1064\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1066\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m copy:\n\u001b[0;32m   1067\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m _is_numpy_namespace(xp):\n\u001b[0;32m   1068\u001b[0m         \u001b[38;5;66;03m# only make a copy if `array` and `array_orig` may share memory`\u001b[39;00m\n",
-      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\utils\\validation.py:126\u001b[0m, in \u001b[0;36m_assert_all_finite\u001b[1;34m(X, allow_nan, msg_dtype, estimator_name, input_name)\u001b[0m\n\u001b[0;32m    123\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m first_pass_isfinite:\n\u001b[0;32m    124\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m\n\u001b[1;32m--> 126\u001b[0m \u001b[43m_assert_all_finite_element_wise\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    127\u001b[0m \u001b[43m    \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    128\u001b[0m \u001b[43m    \u001b[49m\u001b[43mxp\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mxp\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    129\u001b[0m \u001b[43m    \u001b[49m\u001b[43mallow_nan\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mallow_nan\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    130\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmsg_dtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmsg_dtype\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    131\u001b[0m \u001b[43m    \u001b[49m\u001b[43mestimator_name\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mestimator_name\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    132\u001b[0m \u001b[43m    \u001b[49m\u001b[43minput_name\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minput_name\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    133\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n",
-      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\utils\\validation.py:175\u001b[0m, in \u001b[0;36m_assert_all_finite_element_wise\u001b[1;34m(X, xp, allow_nan, msg_dtype, estimator_name, input_name)\u001b[0m\n\u001b[0;32m    158\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m estimator_name \u001b[38;5;129;01mand\u001b[39;00m input_name \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mX\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m has_nan_error:\n\u001b[0;32m    159\u001b[0m     \u001b[38;5;66;03m# Improve the error message on how to handle missing values in\u001b[39;00m\n\u001b[0;32m    160\u001b[0m     \u001b[38;5;66;03m# scikit-learn.\u001b[39;00m\n\u001b[0;32m    161\u001b[0m     msg_err \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m    162\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;132;01m{\u001b[39;00mestimator_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m does not accept missing values\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    163\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m encoded as NaN natively. For supervised learning, you might want\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    173\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m#estimators-that-handle-nan-values\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    174\u001b[0m     )\n\u001b[1;32m--> 175\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(msg_err)\n",
-      "\u001b[1;31mValueError\u001b[0m: Input contains NaN."
-     ]
-    }
-   ],
-   "source": [
-    "from sklearn.metrics.pairwise import cosine_similarity\n",
-    "from sklearn.neighbors import NearestNeighbors\n",
-    "\n",
-    "user_item_matrix = pd.pivot_table(df, values='Popularity Score', index='Trend ID', columns='Gender')\n",
-    "\n",
-    "# Calculate similarity matrix\n",
-    "similarity_matrix = cosine_similarity(user_item_matrix)\n",
-    "\n",
-    "# Define a function to get recommendations for a user\n",
-    "def get_recommendations(user_id, num_recommendations):\n",
-    "    similarities = similarity_matrix['Trend ID']\n",
-    "    similarities = similarities.argsort()[:-num_recommendations-1:-1]\n",
-    "    return similarities\n",
-    "\n",
-    "# Get recommendations for a user\n",
-    "user_id = 1\n",
-    "num_recommendations = 5\n",
-    "recommendations = get_recommendations(user_id, num_recommendations)\n",
-    "print(f'Recommendations for user {user_id}: {recommendations}')\n",
-    "\n",
-    "\n",
-    "# Define a simple content-based filtering model\n",
-    "item_features = pd.get_dummies(df, columns=['Color', 'Style', 'Material']).groupby('Trend ID').sum()\n",
-    "\n",
-    "# Define a function to get recommendations for a trend\n",
-    "def get_recommendations(trend_id, num_recommendations):\n",
-    "    trend_features = item_features.loc[trend_id]\n",
-    "    similarities = cosine_similarity([trend_features], item_features).flatten()\n",
-    "    similarities = similarities.argsort()[:-num_recommendations-1:-1]\n",
-    "    return similarities\n",
-    "\n",
-    "# Get recommendations for a trend\n",
-    "trend_id = 'Trend1'\n",
-    "num_recommendations = 5\n",
-    "recommendations = get_recommendations(trend_id, num_recommendations)\n",
-    "print(f'Recommendations for trend {trend_id}: {recommendations}')"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "236c2309-169b-41d1-a67c-4a2b5f46a06d",
-   "metadata": {},
-   "outputs": [],
-   "source": []
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python 3 (ipykernel)",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.12.3"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 5
-}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"f82dea6d-67c9-47dc-94b5-2d8392dc6d7f\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2j3b1UFGwTqBEzyllvp6Doh7boc\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Python.helper.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.main.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.trend_generator.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\" selected=\"Python.trend_generator\">\r\n    <configuration name=\"helper\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"TREND_RECOMMENDER\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/helper.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"TREND_RECOMMENDER\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"trend_generator\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"TREND_RECOMMENDER\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/trend_generator.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.trend_generator\" />\r\n        <item itemvalue=\"Python.helper\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-5b207ade9991-746f403e7f0c-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-241.17890.14\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"f82dea6d-67c9-47dc-94b5-2d8392dc6d7f\" name=\"Changes\" comment=\"\" />\r\n      <created>1720618492666</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1720618492666</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 1e77fab6e7e36747082d68cef04693cd65f75f8d)
+++ b/.idea/workspace.xml	(date 1720972519813)
@@ -6,6 +6,7 @@
   <component name="ChangeListManager">
     <list default="true" id="f82dea6d-67c9-47dc-94b5-2d8392dc6d7f" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -32,7 +33,7 @@
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;
   }
 }</component>
-  <component name="RunManager" selected="Python.trend_generator">
+  <component name="RunManager" selected="Python.main">
     <configuration name="helper" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="TREND_RECOMMENDER" />
       <option name="ENV_FILES" value="" />
